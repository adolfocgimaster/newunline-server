// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appearances.proto

#include "appearances.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Appearance_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagAutomap_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagBank_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagChangedToExpire_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagClothes_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagCyclopedia_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagDefaultAction_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagHeight_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagHook_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagLenshelp_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagLight_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagMarket_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagNPC_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagShift_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagUpgradeClassification_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagWrite_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagWriteOnce_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_AppearanceFlags_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Box_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameGroup_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecialMeaningAppearanceIds_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpriteAnimation_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpriteInfo_appearances_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_appearances_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpritePhase_appearances_2eproto;
namespace Canary {
namespace protobuf {
namespace appearances {
class CoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Coordinate> _instance;
} _Coordinate_default_instance_;
class AppearancesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Appearances> _instance;
} _Appearances_default_instance_;
class SpritePhaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpritePhase> _instance;
} _SpritePhase_default_instance_;
class SpriteAnimationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpriteAnimation> _instance;
} _SpriteAnimation_default_instance_;
class BoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Box> _instance;
} _Box_default_instance_;
class SpriteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpriteInfo> _instance;
} _SpriteInfo_default_instance_;
class FrameGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameGroup> _instance;
} _FrameGroup_default_instance_;
class AppearanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Appearance> _instance;
} _Appearance_default_instance_;
class AppearanceFlagsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlags> _instance;
} _AppearanceFlags_default_instance_;
class AppearanceFlagUpgradeClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagUpgradeClassification> _instance;
} _AppearanceFlagUpgradeClassification_default_instance_;
class AppearanceFlagBankDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagBank> _instance;
} _AppearanceFlagBank_default_instance_;
class AppearanceFlagWriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagWrite> _instance;
} _AppearanceFlagWrite_default_instance_;
class AppearanceFlagWriteOnceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagWriteOnce> _instance;
} _AppearanceFlagWriteOnce_default_instance_;
class AppearanceFlagLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagLight> _instance;
} _AppearanceFlagLight_default_instance_;
class AppearanceFlagHeightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagHeight> _instance;
} _AppearanceFlagHeight_default_instance_;
class AppearanceFlagShiftDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagShift> _instance;
} _AppearanceFlagShift_default_instance_;
class AppearanceFlagClothesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagClothes> _instance;
} _AppearanceFlagClothes_default_instance_;
class AppearanceFlagDefaultActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagDefaultAction> _instance;
} _AppearanceFlagDefaultAction_default_instance_;
class AppearanceFlagMarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagMarket> _instance;
} _AppearanceFlagMarket_default_instance_;
class AppearanceFlagNPCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagNPC> _instance;
} _AppearanceFlagNPC_default_instance_;
class AppearanceFlagAutomapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagAutomap> _instance;
} _AppearanceFlagAutomap_default_instance_;
class AppearanceFlagHookDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagHook> _instance;
} _AppearanceFlagHook_default_instance_;
class AppearanceFlagLenshelpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagLenshelp> _instance;
} _AppearanceFlagLenshelp_default_instance_;
class AppearanceFlagChangedToExpireDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagChangedToExpire> _instance;
} _AppearanceFlagChangedToExpire_default_instance_;
class AppearanceFlagCyclopediaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppearanceFlagCyclopedia> _instance;
} _AppearanceFlagCyclopedia_default_instance_;
class SpecialMeaningAppearanceIdsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpecialMeaningAppearanceIds> _instance;
} _SpecialMeaningAppearanceIds_default_instance_;
}  // namespace appearances
}  // namespace protobuf
}  // namespace Canary
static void InitDefaultsscc_info_Appearance_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_Appearance_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::Appearance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::Appearance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Appearance_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Appearance_appearances_2eproto}, {
      &scc_info_FrameGroup_appearances_2eproto.base,
      &scc_info_AppearanceFlags_appearances_2eproto.base,}};

static void InitDefaultsscc_info_AppearanceFlagAutomap_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagAutomap_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagAutomap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagAutomap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagAutomap_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagAutomap_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagBank_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagBank_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagBank();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagBank::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagBank_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagBank_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagChangedToExpire_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagChangedToExpire_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagChangedToExpire_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagChangedToExpire_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagClothes_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagClothes_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagClothes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagClothes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagClothes_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagClothes_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagCyclopedia_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagCyclopedia_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagCyclopedia();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagCyclopedia::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagCyclopedia_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagCyclopedia_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagDefaultAction_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagDefaultAction_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagDefaultAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagDefaultAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagDefaultAction_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagDefaultAction_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagHeight_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagHeight_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagHeight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagHeight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagHeight_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagHeight_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagHook_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagHook_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagHook();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagHook::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagHook_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagHook_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagLenshelp_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagLenshelp_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagLenshelp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagLenshelp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagLenshelp_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagLenshelp_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagLight_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagLight_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagLight_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagLight_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagMarket_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagMarket_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagMarket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagMarket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagMarket_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagMarket_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagNPC_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagNPC_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagNPC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagNPC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagNPC_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagNPC_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagShift_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagShift_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagShift();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagShift::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagShift_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagShift_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagUpgradeClassification_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagUpgradeClassification_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagUpgradeClassification_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagUpgradeClassification_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagWrite_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagWrite_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagWrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagWrite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagWrite_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagWrite_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlagWriteOnce_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlagWriteOnce_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlagWriteOnce();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlagWriteOnce::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppearanceFlagWriteOnce_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppearanceFlagWriteOnce_appearances_2eproto}, {}};

static void InitDefaultsscc_info_AppearanceFlags_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_AppearanceFlags_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::AppearanceFlags();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::AppearanceFlags::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_AppearanceFlags_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 16, 0, InitDefaultsscc_info_AppearanceFlags_appearances_2eproto}, {
      &scc_info_AppearanceFlagBank_appearances_2eproto.base,
      &scc_info_AppearanceFlagWrite_appearances_2eproto.base,
      &scc_info_AppearanceFlagWriteOnce_appearances_2eproto.base,
      &scc_info_AppearanceFlagHook_appearances_2eproto.base,
      &scc_info_AppearanceFlagLight_appearances_2eproto.base,
      &scc_info_AppearanceFlagShift_appearances_2eproto.base,
      &scc_info_AppearanceFlagHeight_appearances_2eproto.base,
      &scc_info_AppearanceFlagAutomap_appearances_2eproto.base,
      &scc_info_AppearanceFlagLenshelp_appearances_2eproto.base,
      &scc_info_AppearanceFlagClothes_appearances_2eproto.base,
      &scc_info_AppearanceFlagDefaultAction_appearances_2eproto.base,
      &scc_info_AppearanceFlagMarket_appearances_2eproto.base,
      &scc_info_AppearanceFlagNPC_appearances_2eproto.base,
      &scc_info_AppearanceFlagChangedToExpire_appearances_2eproto.base,
      &scc_info_AppearanceFlagCyclopedia_appearances_2eproto.base,
      &scc_info_AppearanceFlagUpgradeClassification_appearances_2eproto.base,}};

static void InitDefaultsscc_info_Appearances_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_Appearances_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::Appearances();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::Appearances::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Appearances_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Appearances_appearances_2eproto}, {
      &scc_info_Appearance_appearances_2eproto.base,
      &scc_info_SpecialMeaningAppearanceIds_appearances_2eproto.base,}};

static void InitDefaultsscc_info_Box_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_Box_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::Box();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::Box::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Box_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Box_appearances_2eproto}, {}};

static void InitDefaultsscc_info_Coordinate_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_Coordinate_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::Coordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::Coordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Coordinate_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Coordinate_appearances_2eproto}, {}};

static void InitDefaultsscc_info_FrameGroup_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_FrameGroup_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::FrameGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::FrameGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameGroup_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameGroup_appearances_2eproto}, {
      &scc_info_SpriteInfo_appearances_2eproto.base,}};

static void InitDefaultsscc_info_SpecialMeaningAppearanceIds_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_SpecialMeaningAppearanceIds_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpecialMeaningAppearanceIds_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpecialMeaningAppearanceIds_appearances_2eproto}, {}};

static void InitDefaultsscc_info_SpriteAnimation_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_SpriteAnimation_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::SpriteAnimation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::SpriteAnimation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpriteAnimation_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpriteAnimation_appearances_2eproto}, {
      &scc_info_SpritePhase_appearances_2eproto.base,}};

static void InitDefaultsscc_info_SpriteInfo_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_SpriteInfo_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::SpriteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::SpriteInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpriteInfo_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpriteInfo_appearances_2eproto}, {
      &scc_info_SpriteAnimation_appearances_2eproto.base,
      &scc_info_Box_appearances_2eproto.base,}};

static void InitDefaultsscc_info_SpritePhase_appearances_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Canary::protobuf::appearances::_SpritePhase_default_instance_;
    new (ptr) ::Canary::protobuf::appearances::SpritePhase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Canary::protobuf::appearances::SpritePhase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpritePhase_appearances_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpritePhase_appearances_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_appearances_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_appearances_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_appearances_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_appearances_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Coordinate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Coordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Coordinate, x_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Coordinate, y_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Coordinate, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearances, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearances, object_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearances, outfit_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearances, effect_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearances, missile_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearances, special_meaning_appearance_ids_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpritePhase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpritePhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpritePhase, duration_min_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpritePhase, duration_max_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteAnimation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteAnimation, default_start_phase_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteAnimation, synchronized_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteAnimation, random_start_phase_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteAnimation, loop_type_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteAnimation, loop_count_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteAnimation, sprite_phase_),
  0,
  1,
  2,
  4,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Box, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Box, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Box, x_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Box, y_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Box, width_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Box, height_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, pattern_width_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, pattern_height_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, pattern_depth_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, layers_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, sprite_id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, bounding_square_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, animation_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, is_opaque_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpriteInfo, bounding_box_per_direction_),
  1,
  2,
  3,
  4,
  ~0u,
  5,
  0,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::FrameGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::FrameGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::FrameGroup, fixed_frame_group_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::FrameGroup, id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::FrameGroup, sprite_info_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearance, id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearance, frame_group_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearance, flags_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearance, name_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::Appearance, description_),
  3,
  ~0u,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, bank_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, clip_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, bottom_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, top_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, container_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, cumulative_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, usable_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, forceuse_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, multiuse_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, write_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, write_once_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, liquidpool_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, unpass_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, unmove_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, unsight_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, avoid_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, no_movement_animation_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, take_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, liquidcontainer_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, hang_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, hook_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, rotate_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, light_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, dont_hide_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, translucent_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, shift_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, height_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, lying_object_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, animate_always_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, automap_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, lenshelp_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, fullbank_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, ignore_look_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, clothes_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, default_action_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, market_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, wrap_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, unwrap_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, topeffect_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, npcsaledata_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, changedtoexpire_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, corpse_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, player_corpse_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, cyclopediaitem_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, ammo_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, show_off_socket_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, reportable_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, upgradeclassification_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, reverse_addons_east_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, reverse_addons_west_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, reverse_addons_south_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, reverse_addons_north_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, wearout_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, clockexpire_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, expire_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlags, expirestop_),
  0,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  1,
  2,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  3,
  32,
  4,
  33,
  34,
  5,
  6,
  35,
  36,
  7,
  8,
  37,
  38,
  9,
  10,
  11,
  39,
  40,
  41,
  ~0u,
  12,
  42,
  43,
  13,
  44,
  45,
  46,
  14,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification, upgrade_classification_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagBank, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagBank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagBank, waypoints_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagWrite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagWrite, max_text_length_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagWriteOnce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagWriteOnce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagWriteOnce, max_text_length_once_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagLight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagLight, brightness_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagLight, color_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagHeight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagHeight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagHeight, elevation_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagShift, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagShift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagShift, x_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagShift, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagClothes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagClothes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagClothes, slot_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagDefaultAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagDefaultAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagDefaultAction, action_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagMarket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagMarket, category_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagMarket, trade_as_object_id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagMarket, show_as_object_id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagMarket, restrict_to_profession_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagMarket, minimum_level_),
  3,
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagNPC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagNPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagNPC, name_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagNPC, location_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagNPC, sale_price_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagNPC, buy_price_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagNPC, currency_object_type_id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagNPC, currency_quest_flag_display_name_),
  0,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagAutomap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagAutomap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagAutomap, color_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagHook, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagHook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagHook, direction_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagLenshelp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagLenshelp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagLenshelp, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagChangedToExpire, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagChangedToExpire, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagChangedToExpire, former_object_typeid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagCyclopedia, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagCyclopedia, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::AppearanceFlagCyclopedia, cyclopedia_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpecialMeaningAppearanceIds, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpecialMeaningAppearanceIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpecialMeaningAppearanceIds, gold_coin_id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpecialMeaningAppearanceIds, platinum_coin_id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpecialMeaningAppearanceIds, crystal_coin_id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpecialMeaningAppearanceIds, tibia_coin_id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpecialMeaningAppearanceIds, stamped_letter_id_),
  PROTOBUF_FIELD_OFFSET(::Canary::protobuf::appearances::SpecialMeaningAppearanceIds, supply_stash_id_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::Canary::protobuf::appearances::Coordinate)},
  { 11, 21, sizeof(::Canary::protobuf::appearances::Appearances)},
  { 26, 33, sizeof(::Canary::protobuf::appearances::SpritePhase)},
  { 35, 46, sizeof(::Canary::protobuf::appearances::SpriteAnimation)},
  { 52, 61, sizeof(::Canary::protobuf::appearances::Box)},
  { 65, 79, sizeof(::Canary::protobuf::appearances::SpriteInfo)},
  { 88, 96, sizeof(::Canary::protobuf::appearances::FrameGroup)},
  { 99, 109, sizeof(::Canary::protobuf::appearances::Appearance)},
  { 114, 175, sizeof(::Canary::protobuf::appearances::AppearanceFlags)},
  { 231, 237, sizeof(::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification)},
  { 238, 244, sizeof(::Canary::protobuf::appearances::AppearanceFlagBank)},
  { 245, 251, sizeof(::Canary::protobuf::appearances::AppearanceFlagWrite)},
  { 252, 258, sizeof(::Canary::protobuf::appearances::AppearanceFlagWriteOnce)},
  { 259, 266, sizeof(::Canary::protobuf::appearances::AppearanceFlagLight)},
  { 268, 274, sizeof(::Canary::protobuf::appearances::AppearanceFlagHeight)},
  { 275, 282, sizeof(::Canary::protobuf::appearances::AppearanceFlagShift)},
  { 284, 290, sizeof(::Canary::protobuf::appearances::AppearanceFlagClothes)},
  { 291, 297, sizeof(::Canary::protobuf::appearances::AppearanceFlagDefaultAction)},
  { 298, 308, sizeof(::Canary::protobuf::appearances::AppearanceFlagMarket)},
  { 313, 324, sizeof(::Canary::protobuf::appearances::AppearanceFlagNPC)},
  { 330, 336, sizeof(::Canary::protobuf::appearances::AppearanceFlagAutomap)},
  { 337, 343, sizeof(::Canary::protobuf::appearances::AppearanceFlagHook)},
  { 344, 350, sizeof(::Canary::protobuf::appearances::AppearanceFlagLenshelp)},
  { 351, 357, sizeof(::Canary::protobuf::appearances::AppearanceFlagChangedToExpire)},
  { 358, 364, sizeof(::Canary::protobuf::appearances::AppearanceFlagCyclopedia)},
  { 365, 376, sizeof(::Canary::protobuf::appearances::SpecialMeaningAppearanceIds)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_Coordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_Appearances_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_SpritePhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_SpriteAnimation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_Box_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_SpriteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_FrameGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_Appearance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlags_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagUpgradeClassification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagBank_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagWriteOnce_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagHeight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagShift_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagClothes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagDefaultAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagMarket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagNPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagAutomap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagHook_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagLenshelp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagChangedToExpire_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_AppearanceFlagCyclopedia_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Canary::protobuf::appearances::_SpecialMeaningAppearanceIds_default_instance_),
};

const char descriptor_table_protodef_appearances_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021appearances.proto\022\033Canary.protobuf.app"
  "earances\"-\n\nCoordinate\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002"
  " \001(\r\022\t\n\001z\030\003 \001(\r\"\324\002\n\013Appearances\0227\n\006objec"
  "t\030\001 \003(\0132\'.Canary.protobuf.appearances.Ap"
  "pearance\0227\n\006outfit\030\002 \003(\0132\'.Canary.protob"
  "uf.appearances.Appearance\0227\n\006effect\030\003 \003("
  "\0132\'.Canary.protobuf.appearances.Appearan"
  "ce\0228\n\007missile\030\004 \003(\0132\'.Canary.protobuf.ap"
  "pearances.Appearance\022`\n\036special_meaning_"
  "appearance_ids\030\005 \001(\01328.Canary.protobuf.a"
  "ppearances.SpecialMeaningAppearanceIds\"9"
  "\n\013SpritePhase\022\024\n\014duration_min\030\001 \001(\r\022\024\n\014d"
  "uration_max\030\002 \001(\r\"\371\001\n\017SpriteAnimation\022\033\n"
  "\023default_start_phase\030\001 \001(\r\022\024\n\014synchroniz"
  "ed\030\002 \001(\010\022\032\n\022random_start_phase\030\003 \001(\010\022C\n\t"
  "loop_type\030\004 \001(\01620.Canary.protobuf.appear"
  "ances.ANIMATION_LOOP_TYPE\022\022\n\nloop_count\030"
  "\005 \001(\r\022>\n\014sprite_phase\030\006 \003(\0132(.Canary.pro"
  "tobuf.appearances.SpritePhase\":\n\003Box\022\t\n\001"
  "x\030\001 \001(\r\022\t\n\001y\030\002 \001(\r\022\r\n\005width\030\003 \001(\r\022\016\n\006hei"
  "ght\030\004 \001(\r\"\250\002\n\nSpriteInfo\022\025\n\rpattern_widt"
  "h\030\001 \001(\r\022\026\n\016pattern_height\030\002 \001(\r\022\025\n\rpatte"
  "rn_depth\030\003 \001(\r\022\016\n\006layers\030\004 \001(\r\022\021\n\tsprite"
  "_id\030\005 \003(\r\022\027\n\017bounding_square\030\007 \001(\r\022\?\n\tan"
  "imation\030\006 \001(\0132,.Canary.protobuf.appearan"
  "ces.SpriteAnimation\022\021\n\tis_opaque\030\010 \001(\010\022D"
  "\n\032bounding_box_per_direction\030\t \003(\0132 .Can"
  "ary.protobuf.appearances.Box\"\241\001\n\nFrameGr"
  "oup\022I\n\021fixed_frame_group\030\001 \001(\0162..Canary."
  "protobuf.appearances.FIXED_FRAME_GROUP\022\n"
  "\n\002id\030\002 \001(\r\022<\n\013sprite_info\030\003 \001(\0132\'.Canary"
  ".protobuf.appearances.SpriteInfo\"\266\001\n\nApp"
  "earance\022\n\n\002id\030\001 \001(\r\022<\n\013frame_group\030\002 \003(\013"
  "2\'.Canary.protobuf.appearances.FrameGrou"
  "p\022;\n\005flags\030\003 \001(\0132,.Canary.protobuf.appea"
  "rances.AppearanceFlags\022\014\n\004name\030\004 \001(\014\022\023\n\013"
  "description\030\005 \001(\014\"\235\017\n\017AppearanceFlags\022=\n"
  "\004bank\030\001 \001(\0132/.Canary.protobuf.appearance"
  "s.AppearanceFlagBank\022\014\n\004clip\030\002 \001(\010\022\016\n\006bo"
  "ttom\030\003 \001(\010\022\013\n\003top\030\004 \001(\010\022\021\n\tcontainer\030\005 \001"
  "(\010\022\022\n\ncumulative\030\006 \001(\010\022\016\n\006usable\030\007 \001(\010\022\020"
  "\n\010forceuse\030\010 \001(\010\022\020\n\010multiuse\030\t \001(\010\022\?\n\005wr"
  "ite\030\n \001(\01320.Canary.protobuf.appearances."
  "AppearanceFlagWrite\022H\n\nwrite_once\030\013 \001(\0132"
  "4.Canary.protobuf.appearances.Appearance"
  "FlagWriteOnce\022\022\n\nliquidpool\030\014 \001(\010\022\016\n\006unp"
  "ass\030\r \001(\010\022\016\n\006unmove\030\016 \001(\010\022\017\n\007unsight\030\017 \001"
  "(\010\022\r\n\005avoid\030\020 \001(\010\022\035\n\025no_movement_animati"
  "on\030\021 \001(\010\022\014\n\004take\030\022 \001(\010\022\027\n\017liquidcontaine"
  "r\030\023 \001(\010\022\014\n\004hang\030\024 \001(\010\022=\n\004hook\030\025 \001(\0132/.Ca"
  "nary.protobuf.appearances.AppearanceFlag"
  "Hook\022\016\n\006rotate\030\026 \001(\010\022\?\n\005light\030\027 \001(\01320.Ca"
  "nary.protobuf.appearances.AppearanceFlag"
  "Light\022\021\n\tdont_hide\030\030 \001(\010\022\023\n\013translucent\030"
  "\031 \001(\010\022\?\n\005shift\030\032 \001(\01320.Canary.protobuf.a"
  "ppearances.AppearanceFlagShift\022A\n\006height"
  "\030\033 \001(\01321.Canary.protobuf.appearances.App"
  "earanceFlagHeight\022\024\n\014lying_object\030\034 \001(\010\022"
  "\026\n\016animate_always\030\035 \001(\010\022C\n\007automap\030\036 \001(\013"
  "22.Canary.protobuf.appearances.Appearanc"
  "eFlagAutomap\022E\n\010lenshelp\030\037 \001(\01323.Canary."
  "protobuf.appearances.AppearanceFlagLensh"
  "elp\022\020\n\010fullbank\030  \001(\010\022\023\n\013ignore_look\030! \001"
  "(\010\022C\n\007clothes\030\" \001(\01322.Canary.protobuf.ap"
  "pearances.AppearanceFlagClothes\022P\n\016defau"
  "lt_action\030# \001(\01328.Canary.protobuf.appear"
  "ances.AppearanceFlagDefaultAction\022A\n\006mar"
  "ket\030$ \001(\01321.Canary.protobuf.appearances."
  "AppearanceFlagMarket\022\014\n\004wrap\030% \001(\010\022\016\n\006un"
  "wrap\030& \001(\010\022\021\n\ttopeffect\030\' \001(\010\022C\n\013npcsale"
  "data\030( \003(\0132..Canary.protobuf.appearances"
  ".AppearanceFlagNPC\022S\n\017changedtoexpire\030) "
  "\001(\0132:.Canary.protobuf.appearances.Appear"
  "anceFlagChangedToExpire\022\016\n\006corpse\030* \001(\010\022"
  "\025\n\rplayer_corpse\030+ \001(\010\022M\n\016cyclopediaitem"
  "\030, \001(\01325.Canary.protobuf.appearances.App"
  "earanceFlagCyclopedia\022\014\n\004ammo\030- \001(\010\022\027\n\017s"
  "how_off_socket\030. \001(\010\022\022\n\nreportable\030/ \001(\010"
  "\022_\n\025upgradeclassification\0300 \001(\0132@.Canary"
  ".protobuf.appearances.AppearanceFlagUpgr"
  "adeClassification\022\033\n\023reverse_addons_east"
  "\0301 \001(\010\022\033\n\023reverse_addons_west\0302 \001(\010\022\034\n\024r"
  "everse_addons_south\0303 \001(\010\022\034\n\024reverse_add"
  "ons_north\0304 \001(\010\022\017\n\007wearout\0305 \001(\010\022\023\n\013cloc"
  "kexpire\0306 \001(\010\022\016\n\006expire\0307 \001(\010\022\022\n\nexpires"
  "top\0308 \001(\010\"E\n#AppearanceFlagUpgradeClassi"
  "fication\022\036\n\026upgrade_classification\030\001 \001(\r"
  "\"\'\n\022AppearanceFlagBank\022\021\n\twaypoints\030\001 \001("
  "\r\".\n\023AppearanceFlagWrite\022\027\n\017max_text_len"
  "gth\030\001 \001(\r\"7\n\027AppearanceFlagWriteOnce\022\034\n\024"
  "max_text_length_once\030\001 \001(\r\"8\n\023Appearance"
  "FlagLight\022\022\n\nbrightness\030\001 \001(\r\022\r\n\005color\030\002"
  " \001(\r\")\n\024AppearanceFlagHeight\022\021\n\televatio"
  "n\030\001 \001(\r\"+\n\023AppearanceFlagShift\022\t\n\001x\030\001 \001("
  "\r\022\t\n\001y\030\002 \001(\r\"%\n\025AppearanceFlagClothes\022\014\n"
  "\004slot\030\001 \001(\r\"Y\n\033AppearanceFlagDefaultActi"
  "on\022:\n\006action\030\001 \001(\0162*.Canary.protobuf.app"
  "earances.PLAYER_ACTION\"\362\001\n\024AppearanceFla"
  "gMarket\022<\n\010category\030\001 \001(\0162*.Canary.proto"
  "buf.appearances.ITEM_CATEGORY\022\032\n\022trade_a"
  "s_object_id\030\002 \001(\r\022\031\n\021show_as_object_id\030\003"
  " \001(\r\022N\n\026restrict_to_profession\030\005 \003(\0162..C"
  "anary.protobuf.appearances.PLAYER_PROFES"
  "SION\022\025\n\rminimum_level\030\006 \001(\r\"\245\001\n\021Appearan"
  "ceFlagNPC\022\014\n\004name\030\001 \001(\014\022\020\n\010location\030\002 \001("
  "\014\022\022\n\nsale_price\030\003 \001(\r\022\021\n\tbuy_price\030\004 \001(\r"
  "\022\037\n\027currency_object_type_id\030\005 \001(\r\022(\n cur"
  "rency_quest_flag_display_name\030\006 \001(\014\"&\n\025A"
  "ppearanceFlagAutomap\022\r\n\005color\030\001 \001(\r\"O\n\022A"
  "ppearanceFlagHook\0229\n\tdirection\030\001 \001(\0162&.C"
  "anary.protobuf.appearances.HOOK_TYPE\"$\n\026"
  "AppearanceFlagLenshelp\022\n\n\002id\030\001 \001(\r\"=\n\035Ap"
  "pearanceFlagChangedToExpire\022\034\n\024former_ob"
  "ject_typeid\030\001 \001(\r\"3\n\030AppearanceFlagCyclo"
  "pedia\022\027\n\017cyclopedia_type\030\001 \001(\r\"\261\001\n\033Speci"
  "alMeaningAppearanceIds\022\024\n\014gold_coin_id\030\001"
  " \001(\r\022\030\n\020platinum_coin_id\030\002 \001(\r\022\027\n\017crysta"
  "l_coin_id\030\003 \001(\r\022\025\n\rtibia_coin_id\030\004 \001(\r\022\031"
  "\n\021stamped_letter_id\030\005 \001(\r\022\027\n\017supply_stas"
  "h_id\030\006 \001(\r*\224\001\n\rPLAYER_ACTION\022\026\n\022PLAYER_A"
  "CTION_NONE\020\000\022\026\n\022PLAYER_ACTION_LOOK\020\001\022\025\n\021"
  "PLAYER_ACTION_USE\020\002\022\026\n\022PLAYER_ACTION_OPE"
  "N\020\003\022$\n PLAYER_ACTION_AUTOWALK_HIGHLIGHT\020"
  "\004*\315\005\n\rITEM_CATEGORY\022\030\n\024ITEM_CATEGORY_ARM"
  "ORS\020\001\022\031\n\025ITEM_CATEGORY_AMULETS\020\002\022\027\n\023ITEM"
  "_CATEGORY_BOOTS\020\003\022\034\n\030ITEM_CATEGORY_CONTA"
  "INERS\020\004\022\034\n\030ITEM_CATEGORY_DECORATION\020\005\022\026\n"
  "\022ITEM_CATEGORY_FOOD\020\006\022\036\n\032ITEM_CATEGORY_H"
  "ELMETS_HATS\020\007\022\026\n\022ITEM_CATEGORY_LEGS\020\010\022\030\n"
  "\024ITEM_CATEGORY_OTHERS\020\t\022\031\n\025ITEM_CATEGORY"
  "_POTIONS\020\n\022\027\n\023ITEM_CATEGORY_RINGS\020\013\022\027\n\023I"
  "TEM_CATEGORY_RUNES\020\014\022\031\n\025ITEM_CATEGORY_SH"
  "IELDS\020\r\022\027\n\023ITEM_CATEGORY_TOOLS\020\016\022\033\n\027ITEM"
  "_CATEGORY_VALUABLES\020\017\022\034\n\030ITEM_CATEGORY_A"
  "MMUNITION\020\020\022\026\n\022ITEM_CATEGORY_AXES\020\021\022\027\n\023I"
  "TEM_CATEGORY_CLUBS\020\022\022\"\n\036ITEM_CATEGORY_DI"
  "STANCE_WEAPONS\020\023\022\030\n\024ITEM_CATEGORY_SWORDS"
  "\020\024\022\034\n\030ITEM_CATEGORY_WANDS_RODS\020\025\022!\n\035ITEM"
  "_CATEGORY_PREMIUM_SCROLLS\020\026\022\035\n\031ITEM_CATE"
  "GORY_TIBIA_COINS\020\027\022#\n\037ITEM_CATEGORY_CREA"
  "TURE_PRODUCTS\020\030\022\030\n\024ITEM_CATEGORY_QUIVER\020"
  "\031*\355\001\n\021PLAYER_PROFESSION\022\"\n\025PLAYER_PROFES"
  "SION_ANY\020\377\377\377\377\377\377\377\377\377\001\022\032\n\026PLAYER_PROFESSION"
  "_NONE\020\000\022\034\n\030PLAYER_PROFESSION_KNIGHT\020\001\022\035\n"
  "\031PLAYER_PROFESSION_PALADIN\020\002\022\036\n\032PLAYER_P"
  "ROFESSION_SORCERER\020\003\022\033\n\027PLAYER_PROFESSIO"
  "N_DRUID\020\004\022\036\n\032PLAYER_PROFESSION_PROMOTED\020"
  "\n*\203\001\n\023ANIMATION_LOOP_TYPE\022)\n\034ANIMATION_L"
  "OOP_TYPE_PINGPONG\020\377\377\377\377\377\377\377\377\377\001\022 \n\034ANIMATIO"
  "N_LOOP_TYPE_INFINITE\020\000\022\037\n\033ANIMATION_LOOP"
  "_TYPE_COUNTED\020\001*4\n\tHOOK_TYPE\022\023\n\017HOOK_TYP"
  "E_SOUTH\020\001\022\022\n\016HOOK_TYPE_EAST\020\002*\201\001\n\021FIXED_"
  "FRAME_GROUP\022!\n\035FIXED_FRAME_GROUP_OUTFIT_"
  "IDLE\020\000\022#\n\037FIXED_FRAME_GROUP_OUTFIT_MOVIN"
  "G\020\001\022$\n FIXED_FRAME_GROUP_OBJECT_INITIAL\020"
  "\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_appearances_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_appearances_2eproto_sccs[26] = {
  &scc_info_Appearance_appearances_2eproto.base,
  &scc_info_AppearanceFlagAutomap_appearances_2eproto.base,
  &scc_info_AppearanceFlagBank_appearances_2eproto.base,
  &scc_info_AppearanceFlagChangedToExpire_appearances_2eproto.base,
  &scc_info_AppearanceFlagClothes_appearances_2eproto.base,
  &scc_info_AppearanceFlagCyclopedia_appearances_2eproto.base,
  &scc_info_AppearanceFlagDefaultAction_appearances_2eproto.base,
  &scc_info_AppearanceFlagHeight_appearances_2eproto.base,
  &scc_info_AppearanceFlagHook_appearances_2eproto.base,
  &scc_info_AppearanceFlagLenshelp_appearances_2eproto.base,
  &scc_info_AppearanceFlagLight_appearances_2eproto.base,
  &scc_info_AppearanceFlagMarket_appearances_2eproto.base,
  &scc_info_AppearanceFlagNPC_appearances_2eproto.base,
  &scc_info_AppearanceFlagShift_appearances_2eproto.base,
  &scc_info_AppearanceFlagUpgradeClassification_appearances_2eproto.base,
  &scc_info_AppearanceFlagWrite_appearances_2eproto.base,
  &scc_info_AppearanceFlagWriteOnce_appearances_2eproto.base,
  &scc_info_AppearanceFlags_appearances_2eproto.base,
  &scc_info_Appearances_appearances_2eproto.base,
  &scc_info_Box_appearances_2eproto.base,
  &scc_info_Coordinate_appearances_2eproto.base,
  &scc_info_FrameGroup_appearances_2eproto.base,
  &scc_info_SpecialMeaningAppearanceIds_appearances_2eproto.base,
  &scc_info_SpriteAnimation_appearances_2eproto.base,
  &scc_info_SpriteInfo_appearances_2eproto.base,
  &scc_info_SpritePhase_appearances_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_appearances_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_appearances_2eproto = {
  false, false, descriptor_table_protodef_appearances_2eproto, "appearances.proto", 6201,
  &descriptor_table_appearances_2eproto_once, descriptor_table_appearances_2eproto_sccs, descriptor_table_appearances_2eproto_deps, 26, 0,
  schemas, file_default_instances, TableStruct_appearances_2eproto::offsets,
  file_level_metadata_appearances_2eproto, 26, file_level_enum_descriptors_appearances_2eproto, file_level_service_descriptors_appearances_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_appearances_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_appearances_2eproto)), true);
namespace Canary {
namespace protobuf {
namespace appearances {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAYER_ACTION_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_appearances_2eproto);
  return file_level_enum_descriptors_appearances_2eproto[0];
}
bool PLAYER_ACTION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEM_CATEGORY_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_appearances_2eproto);
  return file_level_enum_descriptors_appearances_2eproto[1];
}
bool ITEM_CATEGORY_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAYER_PROFESSION_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_appearances_2eproto);
  return file_level_enum_descriptors_appearances_2eproto[2];
}
bool PLAYER_PROFESSION_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ANIMATION_LOOP_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_appearances_2eproto);
  return file_level_enum_descriptors_appearances_2eproto[3];
}
bool ANIMATION_LOOP_TYPE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HOOK_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_appearances_2eproto);
  return file_level_enum_descriptors_appearances_2eproto[4];
}
bool HOOK_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FIXED_FRAME_GROUP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_appearances_2eproto);
  return file_level_enum_descriptors_appearances_2eproto[5];
}
bool FIXED_FRAME_GROUP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Coordinate::InitAsDefaultInstance() {
}
class Coordinate::_Internal {
 public:
  using HasBits = decltype(std::declval<Coordinate>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Coordinate::Coordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.Coordinate)
}
Coordinate::Coordinate(const Coordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.Coordinate)
}

void Coordinate::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Coordinate::~Coordinate() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.Coordinate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Coordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Coordinate::ArenaDtor(void* object) {
  Coordinate* _this = reinterpret_cast< Coordinate* >(object);
  (void)_this;
}
void Coordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coordinate& Coordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Coordinate_appearances_2eproto.base);
  return *internal_default_instance();
}


void Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.Coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.Coordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // optional uint32 z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.Coordinate)
  return target;
}

size_t Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.Coordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

    // optional uint32 z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_z());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.Coordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.Coordinate)
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Coordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  return true;
}

void Coordinate::InternalSwap(Coordinate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinate, z_)
      + sizeof(Coordinate::z_)
      - PROTOBUF_FIELD_OFFSET(Coordinate, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Appearances::InitAsDefaultInstance() {
  ::Canary::protobuf::appearances::_Appearances_default_instance_._instance.get_mutable()->special_meaning_appearance_ids_ = const_cast< ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds*>(
      ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds::internal_default_instance());
}
class Appearances::_Internal {
 public:
  using HasBits = decltype(std::declval<Appearances>()._has_bits_);
  static const ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds& special_meaning_appearance_ids(const Appearances* msg);
  static void set_has_special_meaning_appearance_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds&
Appearances::_Internal::special_meaning_appearance_ids(const Appearances* msg) {
  return *msg->special_meaning_appearance_ids_;
}
Appearances::Appearances(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_(arena),
  outfit_(arena),
  effect_(arena),
  missile_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.Appearances)
}
Appearances::Appearances(const Appearances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      object_(from.object_),
      outfit_(from.outfit_),
      effect_(from.effect_),
      missile_(from.missile_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_special_meaning_appearance_ids()) {
    special_meaning_appearance_ids_ = new ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds(*from.special_meaning_appearance_ids_);
  } else {
    special_meaning_appearance_ids_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.Appearances)
}

void Appearances::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Appearances_appearances_2eproto.base);
  special_meaning_appearance_ids_ = nullptr;
}

Appearances::~Appearances() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.Appearances)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Appearances::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete special_meaning_appearance_ids_;
}

void Appearances::ArenaDtor(void* object) {
  Appearances* _this = reinterpret_cast< Appearances* >(object);
  (void)_this;
}
void Appearances::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Appearances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Appearances& Appearances::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Appearances_appearances_2eproto.base);
  return *internal_default_instance();
}


void Appearances::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.Appearances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  outfit_.Clear();
  effect_.Clear();
  missile_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(special_meaning_appearance_ids_ != nullptr);
    special_meaning_appearance_ids_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Appearances::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Canary.protobuf.appearances.Appearance object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.appearances.Appearance outfit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outfit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.appearances.Appearance effect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.appearances.Appearance missile = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.SpecialMeaningAppearanceIds special_meaning_appearance_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_special_meaning_appearance_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Appearances::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.Appearances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Canary.protobuf.appearances.Appearance object = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object(i), target, stream);
  }

  // repeated .Canary.protobuf.appearances.Appearance outfit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outfit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outfit(i), target, stream);
  }

  // repeated .Canary.protobuf.appearances.Appearance effect = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_effect(i), target, stream);
  }

  // repeated .Canary.protobuf.appearances.Appearance missile = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missile_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_missile(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.SpecialMeaningAppearanceIds special_meaning_appearance_ids = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::special_meaning_appearance_ids(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.Appearances)
  return target;
}

size_t Appearances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.Appearances)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Canary.protobuf.appearances.Appearance object = 1;
  total_size += 1UL * this->_internal_object_size();
  for (const auto& msg : this->object_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Canary.protobuf.appearances.Appearance outfit = 2;
  total_size += 1UL * this->_internal_outfit_size();
  for (const auto& msg : this->outfit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Canary.protobuf.appearances.Appearance effect = 3;
  total_size += 1UL * this->_internal_effect_size();
  for (const auto& msg : this->effect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Canary.protobuf.appearances.Appearance missile = 4;
  total_size += 1UL * this->_internal_missile_size();
  for (const auto& msg : this->missile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .Canary.protobuf.appearances.SpecialMeaningAppearanceIds special_meaning_appearance_ids = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *special_meaning_appearance_ids_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Appearances::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.Appearances)
  GOOGLE_DCHECK_NE(&from, this);
  const Appearances* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Appearances>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.Appearances)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.Appearances)
    MergeFrom(*source);
  }
}

void Appearances::MergeFrom(const Appearances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.Appearances)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  outfit_.MergeFrom(from.outfit_);
  effect_.MergeFrom(from.effect_);
  missile_.MergeFrom(from.missile_);
  if (from._internal_has_special_meaning_appearance_ids()) {
    _internal_mutable_special_meaning_appearance_ids()->::Canary::protobuf::appearances::SpecialMeaningAppearanceIds::MergeFrom(from._internal_special_meaning_appearance_ids());
  }
}

void Appearances::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.Appearances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Appearances::CopyFrom(const Appearances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.Appearances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Appearances::IsInitialized() const {
  return true;
}

void Appearances::InternalSwap(Appearances* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  object_.InternalSwap(&other->object_);
  outfit_.InternalSwap(&other->outfit_);
  effect_.InternalSwap(&other->effect_);
  missile_.InternalSwap(&other->missile_);
  swap(special_meaning_appearance_ids_, other->special_meaning_appearance_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Appearances::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpritePhase::InitAsDefaultInstance() {
}
class SpritePhase::_Internal {
 public:
  using HasBits = decltype(std::declval<SpritePhase>()._has_bits_);
  static void set_has_duration_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpritePhase::SpritePhase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.SpritePhase)
}
SpritePhase::SpritePhase(const SpritePhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&duration_min_, &from.duration_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_max_) -
    reinterpret_cast<char*>(&duration_min_)) + sizeof(duration_max_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.SpritePhase)
}

void SpritePhase::SharedCtor() {
  ::memset(&duration_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_max_) -
      reinterpret_cast<char*>(&duration_min_)) + sizeof(duration_max_));
}

SpritePhase::~SpritePhase() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.SpritePhase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpritePhase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpritePhase::ArenaDtor(void* object) {
  SpritePhase* _this = reinterpret_cast< SpritePhase* >(object);
  (void)_this;
}
void SpritePhase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpritePhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpritePhase& SpritePhase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpritePhase_appearances_2eproto.base);
  return *internal_default_instance();
}


void SpritePhase::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.SpritePhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&duration_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_max_) -
        reinterpret_cast<char*>(&duration_min_)) + sizeof(duration_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpritePhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 duration_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration_min(&has_bits);
          duration_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_max(&has_bits);
          duration_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpritePhase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.SpritePhase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration_min(), target);
  }

  // optional uint32 duration_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.SpritePhase)
  return target;
}

size_t SpritePhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.SpritePhase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 duration_min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_min());
    }

    // optional uint32 duration_max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpritePhase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.SpritePhase)
  GOOGLE_DCHECK_NE(&from, this);
  const SpritePhase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpritePhase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.SpritePhase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.SpritePhase)
    MergeFrom(*source);
  }
}

void SpritePhase::MergeFrom(const SpritePhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.SpritePhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      duration_min_ = from.duration_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_max_ = from.duration_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpritePhase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.SpritePhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpritePhase::CopyFrom(const SpritePhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.SpritePhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpritePhase::IsInitialized() const {
  return true;
}

void SpritePhase::InternalSwap(SpritePhase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpritePhase, duration_max_)
      + sizeof(SpritePhase::duration_max_)
      - PROTOBUF_FIELD_OFFSET(SpritePhase, duration_min_)>(
          reinterpret_cast<char*>(&duration_min_),
          reinterpret_cast<char*>(&other->duration_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpritePhase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpriteAnimation::InitAsDefaultInstance() {
}
class SpriteAnimation::_Internal {
 public:
  using HasBits = decltype(std::declval<SpriteAnimation>()._has_bits_);
  static void set_has_default_start_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_synchronized(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_random_start_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_loop_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_loop_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SpriteAnimation::SpriteAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sprite_phase_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.SpriteAnimation)
}
SpriteAnimation::SpriteAnimation(const SpriteAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sprite_phase_(from.sprite_phase_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&default_start_phase_, &from.default_start_phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&loop_type_) -
    reinterpret_cast<char*>(&default_start_phase_)) + sizeof(loop_type_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.SpriteAnimation)
}

void SpriteAnimation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpriteAnimation_appearances_2eproto.base);
  ::memset(&default_start_phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loop_count_) -
      reinterpret_cast<char*>(&default_start_phase_)) + sizeof(loop_count_));
  loop_type_ = -1;
}

SpriteAnimation::~SpriteAnimation() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.SpriteAnimation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpriteAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpriteAnimation::ArenaDtor(void* object) {
  SpriteAnimation* _this = reinterpret_cast< SpriteAnimation* >(object);
  (void)_this;
}
void SpriteAnimation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpriteAnimation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpriteAnimation& SpriteAnimation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpriteAnimation_appearances_2eproto.base);
  return *internal_default_instance();
}


void SpriteAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.SpriteAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sprite_phase_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&default_start_phase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loop_count_) -
        reinterpret_cast<char*>(&default_start_phase_)) + sizeof(loop_count_));
    loop_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpriteAnimation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 default_start_phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_default_start_phase(&has_bits);
          default_start_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool synchronized = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_synchronized(&has_bits);
          synchronized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool random_start_phase = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_random_start_phase(&has_bits);
          random_start_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.ANIMATION_LOOP_TYPE loop_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Canary::protobuf::appearances::ANIMATION_LOOP_TYPE_IsValid(val))) {
            _internal_set_loop_type(static_cast<::Canary::protobuf::appearances::ANIMATION_LOOP_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 loop_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_loop_count(&has_bits);
          loop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.appearances.SpritePhase sprite_phase = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sprite_phase(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpriteAnimation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.SpriteAnimation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 default_start_phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_default_start_phase(), target);
  }

  // optional bool synchronized = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_synchronized(), target);
  }

  // optional bool random_start_phase = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_random_start_phase(), target);
  }

  // optional .Canary.protobuf.appearances.ANIMATION_LOOP_TYPE loop_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_loop_type(), target);
  }

  // optional uint32 loop_count = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_loop_count(), target);
  }

  // repeated .Canary.protobuf.appearances.SpritePhase sprite_phase = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sprite_phase_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_sprite_phase(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.SpriteAnimation)
  return target;
}

size_t SpriteAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.SpriteAnimation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Canary.protobuf.appearances.SpritePhase sprite_phase = 6;
  total_size += 1UL * this->_internal_sprite_phase_size();
  for (const auto& msg : this->sprite_phase_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 default_start_phase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_default_start_phase());
    }

    // optional bool synchronized = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool random_start_phase = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 loop_count = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_loop_count());
    }

    // optional .Canary.protobuf.appearances.ANIMATION_LOOP_TYPE loop_type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_loop_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpriteAnimation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.SpriteAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const SpriteAnimation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpriteAnimation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.SpriteAnimation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.SpriteAnimation)
    MergeFrom(*source);
  }
}

void SpriteAnimation::MergeFrom(const SpriteAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.SpriteAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sprite_phase_.MergeFrom(from.sprite_phase_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      default_start_phase_ = from.default_start_phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      synchronized_ = from.synchronized_;
    }
    if (cached_has_bits & 0x00000004u) {
      random_start_phase_ = from.random_start_phase_;
    }
    if (cached_has_bits & 0x00000008u) {
      loop_count_ = from.loop_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      loop_type_ = from.loop_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpriteAnimation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.SpriteAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteAnimation::CopyFrom(const SpriteAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.SpriteAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteAnimation::IsInitialized() const {
  return true;
}

void SpriteAnimation::InternalSwap(SpriteAnimation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sprite_phase_.InternalSwap(&other->sprite_phase_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpriteAnimation, loop_count_)
      + sizeof(SpriteAnimation::loop_count_)
      - PROTOBUF_FIELD_OFFSET(SpriteAnimation, default_start_phase_)>(
          reinterpret_cast<char*>(&default_start_phase_),
          reinterpret_cast<char*>(&other->default_start_phase_));
  swap(loop_type_, other->loop_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpriteAnimation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Box::InitAsDefaultInstance() {
}
class Box::_Internal {
 public:
  using HasBits = decltype(std::declval<Box>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Box::Box(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.Box)
}
Box::Box(const Box& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.Box)
}

void Box::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Box::~Box() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.Box)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Box::ArenaDtor(void* object) {
  Box* _this = reinterpret_cast< Box* >(object);
  (void)_this;
}
void Box::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Box& Box::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Box_appearances_2eproto.base);
  return *internal_default_instance();
}


void Box::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.Box)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&x_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.Box)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // optional uint32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.Box)
  return target;
}

size_t Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.Box)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

    // optional uint32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.Box)
  GOOGLE_DCHECK_NE(&from, this);
  const Box* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.Box)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.Box)
    MergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.Box)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Box::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {
  return true;
}

void Box::InternalSwap(Box* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box, height_)
      + sizeof(Box::height_)
      - PROTOBUF_FIELD_OFFSET(Box, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpriteInfo::InitAsDefaultInstance() {
  ::Canary::protobuf::appearances::_SpriteInfo_default_instance_._instance.get_mutable()->animation_ = const_cast< ::Canary::protobuf::appearances::SpriteAnimation*>(
      ::Canary::protobuf::appearances::SpriteAnimation::internal_default_instance());
}
class SpriteInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SpriteInfo>()._has_bits_);
  static void set_has_pattern_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pattern_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pattern_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bounding_square(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Canary::protobuf::appearances::SpriteAnimation& animation(const SpriteInfo* msg);
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_opaque(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::Canary::protobuf::appearances::SpriteAnimation&
SpriteInfo::_Internal::animation(const SpriteInfo* msg) {
  return *msg->animation_;
}
SpriteInfo::SpriteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sprite_id_(arena),
  bounding_box_per_direction_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.SpriteInfo)
}
SpriteInfo::SpriteInfo(const SpriteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sprite_id_(from.sprite_id_),
      bounding_box_per_direction_(from.bounding_box_per_direction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_animation()) {
    animation_ = new ::Canary::protobuf::appearances::SpriteAnimation(*from.animation_);
  } else {
    animation_ = nullptr;
  }
  ::memcpy(&pattern_width_, &from.pattern_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_opaque_) -
    reinterpret_cast<char*>(&pattern_width_)) + sizeof(is_opaque_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.SpriteInfo)
}

void SpriteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpriteInfo_appearances_2eproto.base);
  ::memset(&animation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_opaque_) -
      reinterpret_cast<char*>(&animation_)) + sizeof(is_opaque_));
}

SpriteInfo::~SpriteInfo() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.SpriteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpriteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete animation_;
}

void SpriteInfo::ArenaDtor(void* object) {
  SpriteInfo* _this = reinterpret_cast< SpriteInfo* >(object);
  (void)_this;
}
void SpriteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpriteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpriteInfo& SpriteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpriteInfo_appearances_2eproto.base);
  return *internal_default_instance();
}


void SpriteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.SpriteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sprite_id_.Clear();
  bounding_box_per_direction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(animation_ != nullptr);
    animation_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&pattern_width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_opaque_) -
        reinterpret_cast<char*>(&pattern_width_)) + sizeof(is_opaque_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpriteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pattern_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pattern_width(&has_bits);
          pattern_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pattern_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pattern_height(&has_bits);
          pattern_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pattern_depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pattern_depth(&has_bits);
          pattern_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 layers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_layers(&has_bits);
          layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sprite_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sprite_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sprite_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.SpriteAnimation animation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_animation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bounding_square = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_bounding_square(&has_bits);
          bounding_square_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_opaque = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_opaque(&has_bits);
          is_opaque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.appearances.Box bounding_box_per_direction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bounding_box_per_direction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpriteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.SpriteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pattern_width = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pattern_width(), target);
  }

  // optional uint32 pattern_height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pattern_height(), target);
  }

  // optional uint32 pattern_depth = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pattern_depth(), target);
  }

  // optional uint32 layers = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_layers(), target);
  }

  // repeated uint32 sprite_id = 5;
  for (int i = 0, n = this->_internal_sprite_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sprite_id(i), target);
  }

  // optional .Canary.protobuf.appearances.SpriteAnimation animation = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::animation(this), target, stream);
  }

  // optional uint32 bounding_square = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bounding_square(), target);
  }

  // optional bool is_opaque = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_opaque(), target);
  }

  // repeated .Canary.protobuf.appearances.Box bounding_box_per_direction = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bounding_box_per_direction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_bounding_box_per_direction(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.SpriteInfo)
  return target;
}

size_t SpriteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.SpriteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sprite_id = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sprite_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sprite_id_size());
    total_size += data_size;
  }

  // repeated .Canary.protobuf.appearances.Box bounding_box_per_direction = 9;
  total_size += 1UL * this->_internal_bounding_box_per_direction_size();
  for (const auto& msg : this->bounding_box_per_direction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .Canary.protobuf.appearances.SpriteAnimation animation = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *animation_);
    }

    // optional uint32 pattern_width = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pattern_width());
    }

    // optional uint32 pattern_height = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pattern_height());
    }

    // optional uint32 pattern_depth = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pattern_depth());
    }

    // optional uint32 layers = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_layers());
    }

    // optional uint32 bounding_square = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bounding_square());
    }

    // optional bool is_opaque = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpriteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.SpriteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SpriteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpriteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.SpriteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.SpriteInfo)
    MergeFrom(*source);
  }
}

void SpriteInfo::MergeFrom(const SpriteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.SpriteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sprite_id_.MergeFrom(from.sprite_id_);
  bounding_box_per_direction_.MergeFrom(from.bounding_box_per_direction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_animation()->::Canary::protobuf::appearances::SpriteAnimation::MergeFrom(from._internal_animation());
    }
    if (cached_has_bits & 0x00000002u) {
      pattern_width_ = from.pattern_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      pattern_height_ = from.pattern_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      pattern_depth_ = from.pattern_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      layers_ = from.layers_;
    }
    if (cached_has_bits & 0x00000020u) {
      bounding_square_ = from.bounding_square_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_opaque_ = from.is_opaque_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpriteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.SpriteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteInfo::CopyFrom(const SpriteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.SpriteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteInfo::IsInitialized() const {
  return true;
}

void SpriteInfo::InternalSwap(SpriteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sprite_id_.InternalSwap(&other->sprite_id_);
  bounding_box_per_direction_.InternalSwap(&other->bounding_box_per_direction_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpriteInfo, is_opaque_)
      + sizeof(SpriteInfo::is_opaque_)
      - PROTOBUF_FIELD_OFFSET(SpriteInfo, animation_)>(
          reinterpret_cast<char*>(&animation_),
          reinterpret_cast<char*>(&other->animation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpriteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameGroup::InitAsDefaultInstance() {
  ::Canary::protobuf::appearances::_FrameGroup_default_instance_._instance.get_mutable()->sprite_info_ = const_cast< ::Canary::protobuf::appearances::SpriteInfo*>(
      ::Canary::protobuf::appearances::SpriteInfo::internal_default_instance());
}
class FrameGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameGroup>()._has_bits_);
  static void set_has_fixed_frame_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Canary::protobuf::appearances::SpriteInfo& sprite_info(const FrameGroup* msg);
  static void set_has_sprite_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Canary::protobuf::appearances::SpriteInfo&
FrameGroup::_Internal::sprite_info(const FrameGroup* msg) {
  return *msg->sprite_info_;
}
FrameGroup::FrameGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.FrameGroup)
}
FrameGroup::FrameGroup(const FrameGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sprite_info()) {
    sprite_info_ = new ::Canary::protobuf::appearances::SpriteInfo(*from.sprite_info_);
  } else {
    sprite_info_ = nullptr;
  }
  ::memcpy(&fixed_frame_group_, &from.fixed_frame_group_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&fixed_frame_group_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.FrameGroup)
}

void FrameGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameGroup_appearances_2eproto.base);
  ::memset(&sprite_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&sprite_info_)) + sizeof(id_));
}

FrameGroup::~FrameGroup() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.FrameGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sprite_info_;
}

void FrameGroup::ArenaDtor(void* object) {
  FrameGroup* _this = reinterpret_cast< FrameGroup* >(object);
  (void)_this;
}
void FrameGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameGroup& FrameGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameGroup_appearances_2eproto.base);
  return *internal_default_instance();
}


void FrameGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.FrameGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sprite_info_ != nullptr);
    sprite_info_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&fixed_frame_group_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&fixed_frame_group_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Canary.protobuf.appearances.FIXED_FRAME_GROUP fixed_frame_group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Canary::protobuf::appearances::FIXED_FRAME_GROUP_IsValid(val))) {
            _internal_set_fixed_frame_group(static_cast<::Canary::protobuf::appearances::FIXED_FRAME_GROUP>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.SpriteInfo sprite_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sprite_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.FrameGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.FIXED_FRAME_GROUP fixed_frame_group = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_fixed_frame_group(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional .Canary.protobuf.appearances.SpriteInfo sprite_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sprite_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.FrameGroup)
  return target;
}

size_t FrameGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.FrameGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Canary.protobuf.appearances.SpriteInfo sprite_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sprite_info_);
    }

    // optional .Canary.protobuf.appearances.FIXED_FRAME_GROUP fixed_frame_group = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fixed_frame_group());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.FrameGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.FrameGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.FrameGroup)
    MergeFrom(*source);
  }
}

void FrameGroup::MergeFrom(const FrameGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.FrameGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_sprite_info()->::Canary::protobuf::appearances::SpriteInfo::MergeFrom(from._internal_sprite_info());
    }
    if (cached_has_bits & 0x00000002u) {
      fixed_frame_group_ = from.fixed_frame_group_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.FrameGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameGroup::CopyFrom(const FrameGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.FrameGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameGroup::IsInitialized() const {
  return true;
}

void FrameGroup::InternalSwap(FrameGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameGroup, id_)
      + sizeof(FrameGroup::id_)
      - PROTOBUF_FIELD_OFFSET(FrameGroup, sprite_info_)>(
          reinterpret_cast<char*>(&sprite_info_),
          reinterpret_cast<char*>(&other->sprite_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Appearance::InitAsDefaultInstance() {
  ::Canary::protobuf::appearances::_Appearance_default_instance_._instance.get_mutable()->flags_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlags*>(
      ::Canary::protobuf::appearances::AppearanceFlags::internal_default_instance());
}
class Appearance::_Internal {
 public:
  using HasBits = decltype(std::declval<Appearance>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlags& flags(const Appearance* msg);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Canary::protobuf::appearances::AppearanceFlags&
Appearance::_Internal::flags(const Appearance* msg) {
  return *msg->flags_;
}
Appearance::Appearance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frame_group_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.Appearance)
}
Appearance::Appearance(const Appearance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      frame_group_(from.frame_group_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_flags()) {
    flags_ = new ::Canary::protobuf::appearances::AppearanceFlags(*from.flags_);
  } else {
    flags_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.Appearance)
}

void Appearance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Appearance_appearances_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(id_));
}

Appearance::~Appearance() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.Appearance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Appearance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flags_;
}

void Appearance::ArenaDtor(void* object) {
  Appearance* _this = reinterpret_cast< Appearance* >(object);
  (void)_this;
}
void Appearance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Appearance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Appearance& Appearance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Appearance_appearances_2eproto.base);
  return *internal_default_instance();
}


void Appearance::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.Appearance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_group_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(flags_ != nullptr);
      flags_->Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Appearance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.appearances.FrameGroup frame_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frame_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlags flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Appearance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.Appearance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .Canary.protobuf.appearances.FrameGroup frame_group = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frame_group_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_frame_group(i), target, stream);
  }

  // optional .Canary.protobuf.appearances.AppearanceFlags flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::flags(this), target, stream);
  }

  // optional bytes name = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional bytes description = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.Appearance)
  return target;
}

size_t Appearance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.Appearance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Canary.protobuf.appearances.FrameGroup frame_group = 2;
  total_size += 1UL * this->_internal_frame_group_size();
  for (const auto& msg : this->frame_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional bytes description = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_description());
    }

    // optional .Canary.protobuf.appearances.AppearanceFlags flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flags_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Appearance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.Appearance)
  GOOGLE_DCHECK_NE(&from, this);
  const Appearance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Appearance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.Appearance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.Appearance)
    MergeFrom(*source);
  }
}

void Appearance::MergeFrom(const Appearance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.Appearance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frame_group_.MergeFrom(from.frame_group_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_flags()->::Canary::protobuf::appearances::AppearanceFlags::MergeFrom(from._internal_flags());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Appearance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.Appearance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Appearance::CopyFrom(const Appearance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.Appearance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Appearance::IsInitialized() const {
  return true;
}

void Appearance::InternalSwap(Appearance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  frame_group_.InternalSwap(&other->frame_group_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Appearance, id_)
      + sizeof(Appearance::id_)
      - PROTOBUF_FIELD_OFFSET(Appearance, flags_)>(
          reinterpret_cast<char*>(&flags_),
          reinterpret_cast<char*>(&other->flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Appearance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlags::InitAsDefaultInstance() {
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->bank_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagBank*>(
      ::Canary::protobuf::appearances::AppearanceFlagBank::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->write_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagWrite*>(
      ::Canary::protobuf::appearances::AppearanceFlagWrite::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->write_once_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagWriteOnce*>(
      ::Canary::protobuf::appearances::AppearanceFlagWriteOnce::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->hook_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagHook*>(
      ::Canary::protobuf::appearances::AppearanceFlagHook::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->light_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagLight*>(
      ::Canary::protobuf::appearances::AppearanceFlagLight::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->shift_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagShift*>(
      ::Canary::protobuf::appearances::AppearanceFlagShift::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->height_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagHeight*>(
      ::Canary::protobuf::appearances::AppearanceFlagHeight::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->automap_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagAutomap*>(
      ::Canary::protobuf::appearances::AppearanceFlagAutomap::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->lenshelp_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagLenshelp*>(
      ::Canary::protobuf::appearances::AppearanceFlagLenshelp::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->clothes_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagClothes*>(
      ::Canary::protobuf::appearances::AppearanceFlagClothes::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->default_action_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagDefaultAction*>(
      ::Canary::protobuf::appearances::AppearanceFlagDefaultAction::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->market_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagMarket*>(
      ::Canary::protobuf::appearances::AppearanceFlagMarket::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->changedtoexpire_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire*>(
      ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->cyclopediaitem_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagCyclopedia*>(
      ::Canary::protobuf::appearances::AppearanceFlagCyclopedia::internal_default_instance());
  ::Canary::protobuf::appearances::_AppearanceFlags_default_instance_._instance.get_mutable()->upgradeclassification_ = const_cast< ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification*>(
      ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification::internal_default_instance());
}
class AppearanceFlags::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlags>()._has_bits_);
  static const ::Canary::protobuf::appearances::AppearanceFlagBank& bank(const AppearanceFlags* msg);
  static void set_has_bank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_top(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_container(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_cumulative(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_usable(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_forceuse(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_multiuse(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagWrite& write(const AppearanceFlags* msg);
  static void set_has_write(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagWriteOnce& write_once(const AppearanceFlags* msg);
  static void set_has_write_once(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_liquidpool(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_unpass(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_unmove(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_unsight(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_avoid(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_no_movement_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_take(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_liquidcontainer(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_hang(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagHook& hook(const AppearanceFlags* msg);
  static void set_has_hook(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rotate(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagLight& light(const AppearanceFlags* msg);
  static void set_has_light(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dont_hide(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_translucent(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagShift& shift(const AppearanceFlags* msg);
  static void set_has_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagHeight& height(const AppearanceFlags* msg);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lying_object(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_animate_always(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagAutomap& automap(const AppearanceFlags* msg);
  static void set_has_automap(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagLenshelp& lenshelp(const AppearanceFlags* msg);
  static void set_has_lenshelp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fullbank(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ignore_look(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagClothes& clothes(const AppearanceFlags* msg);
  static void set_has_clothes(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagDefaultAction& default_action(const AppearanceFlags* msg);
  static void set_has_default_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagMarket& market(const AppearanceFlags* msg);
  static void set_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wrap(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_unwrap(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_topeffect(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire& changedtoexpire(const AppearanceFlags* msg);
  static void set_has_changedtoexpire(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_corpse(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_player_corpse(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagCyclopedia& cyclopediaitem(const AppearanceFlags* msg);
  static void set_has_cyclopediaitem(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ammo(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_show_off_socket(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_reportable(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification& upgradeclassification(const AppearanceFlags* msg);
  static void set_has_upgradeclassification(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_reverse_addons_east(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_reverse_addons_west(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_reverse_addons_south(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_reverse_addons_north(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_wearout(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_clockexpire(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_expire(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_expirestop(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
};

const ::Canary::protobuf::appearances::AppearanceFlagBank&
AppearanceFlags::_Internal::bank(const AppearanceFlags* msg) {
  return *msg->bank_;
}
const ::Canary::protobuf::appearances::AppearanceFlagWrite&
AppearanceFlags::_Internal::write(const AppearanceFlags* msg) {
  return *msg->write_;
}
const ::Canary::protobuf::appearances::AppearanceFlagWriteOnce&
AppearanceFlags::_Internal::write_once(const AppearanceFlags* msg) {
  return *msg->write_once_;
}
const ::Canary::protobuf::appearances::AppearanceFlagHook&
AppearanceFlags::_Internal::hook(const AppearanceFlags* msg) {
  return *msg->hook_;
}
const ::Canary::protobuf::appearances::AppearanceFlagLight&
AppearanceFlags::_Internal::light(const AppearanceFlags* msg) {
  return *msg->light_;
}
const ::Canary::protobuf::appearances::AppearanceFlagShift&
AppearanceFlags::_Internal::shift(const AppearanceFlags* msg) {
  return *msg->shift_;
}
const ::Canary::protobuf::appearances::AppearanceFlagHeight&
AppearanceFlags::_Internal::height(const AppearanceFlags* msg) {
  return *msg->height_;
}
const ::Canary::protobuf::appearances::AppearanceFlagAutomap&
AppearanceFlags::_Internal::automap(const AppearanceFlags* msg) {
  return *msg->automap_;
}
const ::Canary::protobuf::appearances::AppearanceFlagLenshelp&
AppearanceFlags::_Internal::lenshelp(const AppearanceFlags* msg) {
  return *msg->lenshelp_;
}
const ::Canary::protobuf::appearances::AppearanceFlagClothes&
AppearanceFlags::_Internal::clothes(const AppearanceFlags* msg) {
  return *msg->clothes_;
}
const ::Canary::protobuf::appearances::AppearanceFlagDefaultAction&
AppearanceFlags::_Internal::default_action(const AppearanceFlags* msg) {
  return *msg->default_action_;
}
const ::Canary::protobuf::appearances::AppearanceFlagMarket&
AppearanceFlags::_Internal::market(const AppearanceFlags* msg) {
  return *msg->market_;
}
const ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire&
AppearanceFlags::_Internal::changedtoexpire(const AppearanceFlags* msg) {
  return *msg->changedtoexpire_;
}
const ::Canary::protobuf::appearances::AppearanceFlagCyclopedia&
AppearanceFlags::_Internal::cyclopediaitem(const AppearanceFlags* msg) {
  return *msg->cyclopediaitem_;
}
const ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification&
AppearanceFlags::_Internal::upgradeclassification(const AppearanceFlags* msg) {
  return *msg->upgradeclassification_;
}
AppearanceFlags::AppearanceFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  npcsaledata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlags)
}
AppearanceFlags::AppearanceFlags(const AppearanceFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      npcsaledata_(from.npcsaledata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bank()) {
    bank_ = new ::Canary::protobuf::appearances::AppearanceFlagBank(*from.bank_);
  } else {
    bank_ = nullptr;
  }
  if (from._internal_has_write()) {
    write_ = new ::Canary::protobuf::appearances::AppearanceFlagWrite(*from.write_);
  } else {
    write_ = nullptr;
  }
  if (from._internal_has_write_once()) {
    write_once_ = new ::Canary::protobuf::appearances::AppearanceFlagWriteOnce(*from.write_once_);
  } else {
    write_once_ = nullptr;
  }
  if (from._internal_has_hook()) {
    hook_ = new ::Canary::protobuf::appearances::AppearanceFlagHook(*from.hook_);
  } else {
    hook_ = nullptr;
  }
  if (from._internal_has_light()) {
    light_ = new ::Canary::protobuf::appearances::AppearanceFlagLight(*from.light_);
  } else {
    light_ = nullptr;
  }
  if (from._internal_has_shift()) {
    shift_ = new ::Canary::protobuf::appearances::AppearanceFlagShift(*from.shift_);
  } else {
    shift_ = nullptr;
  }
  if (from._internal_has_height()) {
    height_ = new ::Canary::protobuf::appearances::AppearanceFlagHeight(*from.height_);
  } else {
    height_ = nullptr;
  }
  if (from._internal_has_automap()) {
    automap_ = new ::Canary::protobuf::appearances::AppearanceFlagAutomap(*from.automap_);
  } else {
    automap_ = nullptr;
  }
  if (from._internal_has_lenshelp()) {
    lenshelp_ = new ::Canary::protobuf::appearances::AppearanceFlagLenshelp(*from.lenshelp_);
  } else {
    lenshelp_ = nullptr;
  }
  if (from._internal_has_clothes()) {
    clothes_ = new ::Canary::protobuf::appearances::AppearanceFlagClothes(*from.clothes_);
  } else {
    clothes_ = nullptr;
  }
  if (from._internal_has_default_action()) {
    default_action_ = new ::Canary::protobuf::appearances::AppearanceFlagDefaultAction(*from.default_action_);
  } else {
    default_action_ = nullptr;
  }
  if (from._internal_has_market()) {
    market_ = new ::Canary::protobuf::appearances::AppearanceFlagMarket(*from.market_);
  } else {
    market_ = nullptr;
  }
  if (from._internal_has_changedtoexpire()) {
    changedtoexpire_ = new ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire(*from.changedtoexpire_);
  } else {
    changedtoexpire_ = nullptr;
  }
  if (from._internal_has_cyclopediaitem()) {
    cyclopediaitem_ = new ::Canary::protobuf::appearances::AppearanceFlagCyclopedia(*from.cyclopediaitem_);
  } else {
    cyclopediaitem_ = nullptr;
  }
  if (from._internal_has_upgradeclassification()) {
    upgradeclassification_ = new ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification(*from.upgradeclassification_);
  } else {
    upgradeclassification_ = nullptr;
  }
  ::memcpy(&clip_, &from.clip_,
    static_cast<size_t>(reinterpret_cast<char*>(&expirestop_) -
    reinterpret_cast<char*>(&clip_)) + sizeof(expirestop_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlags)
}

void AppearanceFlags::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppearanceFlags_appearances_2eproto.base);
  ::memset(&bank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expirestop_) -
      reinterpret_cast<char*>(&bank_)) + sizeof(expirestop_));
}

AppearanceFlags::~AppearanceFlags() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlags)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bank_;
  if (this != internal_default_instance()) delete write_;
  if (this != internal_default_instance()) delete write_once_;
  if (this != internal_default_instance()) delete hook_;
  if (this != internal_default_instance()) delete light_;
  if (this != internal_default_instance()) delete shift_;
  if (this != internal_default_instance()) delete height_;
  if (this != internal_default_instance()) delete automap_;
  if (this != internal_default_instance()) delete lenshelp_;
  if (this != internal_default_instance()) delete clothes_;
  if (this != internal_default_instance()) delete default_action_;
  if (this != internal_default_instance()) delete market_;
  if (this != internal_default_instance()) delete changedtoexpire_;
  if (this != internal_default_instance()) delete cyclopediaitem_;
  if (this != internal_default_instance()) delete upgradeclassification_;
}

void AppearanceFlags::ArenaDtor(void* object) {
  AppearanceFlags* _this = reinterpret_cast< AppearanceFlags* >(object);
  (void)_this;
}
void AppearanceFlags::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlags::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlags& AppearanceFlags::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlags_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npcsaledata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bank_ != nullptr);
      bank_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(write_ != nullptr);
      write_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(write_once_ != nullptr);
      write_once_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hook_ != nullptr);
      hook_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(light_ != nullptr);
      light_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(shift_ != nullptr);
      shift_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(height_ != nullptr);
      height_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(automap_ != nullptr);
      automap_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(lenshelp_ != nullptr);
      lenshelp_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(clothes_ != nullptr);
      clothes_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(default_action_ != nullptr);
      default_action_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(market_ != nullptr);
      market_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(changedtoexpire_ != nullptr);
      changedtoexpire_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(cyclopediaitem_ != nullptr);
      cyclopediaitem_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(upgradeclassification_ != nullptr);
      upgradeclassification_->Clear();
    }
  }
  clip_ = false;
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&bottom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&liquidpool_) -
        reinterpret_cast<char*>(&bottom_)) + sizeof(liquidpool_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&unpass_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hang_) -
        reinterpret_cast<char*>(&unpass_)) + sizeof(hang_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rotate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wrap_) -
        reinterpret_cast<char*>(&rotate_)) + sizeof(wrap_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&unwrap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverse_addons_east_) -
        reinterpret_cast<char*>(&unwrap_)) + sizeof(reverse_addons_east_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&reverse_addons_west_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expirestop_) -
        reinterpret_cast<char*>(&reverse_addons_west_)) + sizeof(expirestop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlags::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Canary.protobuf.appearances.AppearanceFlagBank bank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bank(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_clip(&_has_bits_);
          clip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool bottom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bottom(&_has_bits_);
          bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool top = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_top(&_has_bits_);
          top_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool container = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_container(&_has_bits_);
          container_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cumulative = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cumulative(&_has_bits_);
          cumulative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool usable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_usable(&_has_bits_);
          usable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool forceuse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_forceuse(&_has_bits_);
          forceuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool multiuse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_multiuse(&_has_bits_);
          multiuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagWrite write = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_write(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagWriteOnce write_once = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_write_once(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool liquidpool = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_liquidpool(&_has_bits_);
          liquidpool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unpass = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_unpass(&_has_bits_);
          unpass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unmove = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_unmove(&_has_bits_);
          unmove_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unsight = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_unsight(&_has_bits_);
          unsight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool avoid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_avoid(&_has_bits_);
          avoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool no_movement_animation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_no_movement_animation(&_has_bits_);
          no_movement_animation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool take = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_take(&_has_bits_);
          take_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool liquidcontainer = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_liquidcontainer(&_has_bits_);
          liquidcontainer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hang = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_hang(&_has_bits_);
          hang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagHook hook = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_hook(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rotate = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_rotate(&_has_bits_);
          rotate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagLight light = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_light(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dont_hide = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_dont_hide(&_has_bits_);
          dont_hide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool translucent = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_translucent(&_has_bits_);
          translucent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagShift shift = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_shift(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagHeight height = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lying_object = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_lying_object(&_has_bits_);
          lying_object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool animate_always = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_animate_always(&_has_bits_);
          animate_always_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagAutomap automap = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_automap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagLenshelp lenshelp = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_lenshelp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fullbank = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_fullbank(&_has_bits_);
          fullbank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ignore_look = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ignore_look(&_has_bits_);
          ignore_look_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagClothes clothes = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clothes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagDefaultAction default_action = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagMarket market = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wrap = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_wrap(&_has_bits_);
          wrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unwrap = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_unwrap(&_has_bits_);
          unwrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool topeffect = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_topeffect(&_has_bits_);
          topeffect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.appearances.AppearanceFlagNPC npcsaledata = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_npcsaledata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagChangedToExpire changedtoexpire = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_changedtoexpire(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool corpse = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_corpse(&_has_bits_);
          corpse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool player_corpse = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_player_corpse(&_has_bits_);
          player_corpse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagCyclopedia cyclopediaitem = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cyclopediaitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ammo = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ammo(&_has_bits_);
          ammo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_off_socket = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_show_off_socket(&_has_bits_);
          show_off_socket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reportable = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_reportable(&_has_bits_);
          reportable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Canary.protobuf.appearances.AppearanceFlagUpgradeClassification upgradeclassification = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgradeclassification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse_addons_east = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_reverse_addons_east(&_has_bits_);
          reverse_addons_east_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse_addons_west = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_reverse_addons_west(&_has_bits_);
          reverse_addons_west_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse_addons_south = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_reverse_addons_south(&_has_bits_);
          reverse_addons_south_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool reverse_addons_north = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_reverse_addons_north(&_has_bits_);
          reverse_addons_north_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool wearout = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_wearout(&_has_bits_);
          wearout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool clockexpire = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_clockexpire(&_has_bits_);
          clockexpire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expire = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_expire(&_has_bits_);
          expire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool expirestop = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_expirestop(&_has_bits_);
          expirestop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlags::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlags)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.AppearanceFlagBank bank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bank(this), target, stream);
  }

  // optional bool clip = 2;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_clip(), target);
  }

  // optional bool bottom = 3;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bottom(), target);
  }

  // optional bool top = 4;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_top(), target);
  }

  // optional bool container = 5;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_container(), target);
  }

  // optional bool cumulative = 6;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cumulative(), target);
  }

  // optional bool usable = 7;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_usable(), target);
  }

  // optional bool forceuse = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_forceuse(), target);
  }

  // optional bool multiuse = 9;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_multiuse(), target);
  }

  // optional .Canary.protobuf.appearances.AppearanceFlagWrite write = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::write(this), target, stream);
  }

  // optional .Canary.protobuf.appearances.AppearanceFlagWriteOnce write_once = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::write_once(this), target, stream);
  }

  // optional bool liquidpool = 12;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_liquidpool(), target);
  }

  // optional bool unpass = 13;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_unpass(), target);
  }

  // optional bool unmove = 14;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_unmove(), target);
  }

  // optional bool unsight = 15;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_unsight(), target);
  }

  // optional bool avoid = 16;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_avoid(), target);
  }

  // optional bool no_movement_animation = 17;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_no_movement_animation(), target);
  }

  // optional bool take = 18;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_take(), target);
  }

  // optional bool liquidcontainer = 19;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_liquidcontainer(), target);
  }

  // optional bool hang = 20;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_hang(), target);
  }

  // optional .Canary.protobuf.appearances.AppearanceFlagHook hook = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::hook(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool rotate = 22;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_rotate(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.AppearanceFlagLight light = 23;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::light(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool dont_hide = 24;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_dont_hide(), target);
  }

  // optional bool translucent = 25;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_translucent(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.AppearanceFlagShift shift = 26;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::shift(this), target, stream);
  }

  // optional .Canary.protobuf.appearances.AppearanceFlagHeight height = 27;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::height(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool lying_object = 28;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_lying_object(), target);
  }

  // optional bool animate_always = 29;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_animate_always(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.AppearanceFlagAutomap automap = 30;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::automap(this), target, stream);
  }

  // optional .Canary.protobuf.appearances.AppearanceFlagLenshelp lenshelp = 31;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::lenshelp(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool fullbank = 32;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_fullbank(), target);
  }

  // optional bool ignore_look = 33;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_ignore_look(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.AppearanceFlagClothes clothes = 34;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::clothes(this), target, stream);
  }

  // optional .Canary.protobuf.appearances.AppearanceFlagDefaultAction default_action = 35;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::default_action(this), target, stream);
  }

  // optional .Canary.protobuf.appearances.AppearanceFlagMarket market = 36;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::market(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool wrap = 37;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->_internal_wrap(), target);
  }

  // optional bool unwrap = 38;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_unwrap(), target);
  }

  // optional bool topeffect = 39;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_topeffect(), target);
  }

  // repeated .Canary.protobuf.appearances.AppearanceFlagNPC npcsaledata = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_npcsaledata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_npcsaledata(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.AppearanceFlagChangedToExpire changedtoexpire = 41;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::changedtoexpire(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool corpse = 42;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_corpse(), target);
  }

  // optional bool player_corpse = 43;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_player_corpse(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.AppearanceFlagCyclopedia cyclopediaitem = 44;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::cyclopediaitem(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool ammo = 45;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(45, this->_internal_ammo(), target);
  }

  // optional bool show_off_socket = 46;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(46, this->_internal_show_off_socket(), target);
  }

  // optional bool reportable = 47;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_reportable(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.AppearanceFlagUpgradeClassification upgradeclassification = 48;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        48, _Internal::upgradeclassification(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool reverse_addons_east = 49;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(49, this->_internal_reverse_addons_east(), target);
  }

  // optional bool reverse_addons_west = 50;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_reverse_addons_west(), target);
  }

  // optional bool reverse_addons_south = 51;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_reverse_addons_south(), target);
  }

  // optional bool reverse_addons_north = 52;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(52, this->_internal_reverse_addons_north(), target);
  }

  // optional bool wearout = 53;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(53, this->_internal_wearout(), target);
  }

  // optional bool clockexpire = 54;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(54, this->_internal_clockexpire(), target);
  }

  // optional bool expire = 55;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(55, this->_internal_expire(), target);
  }

  // optional bool expirestop = 56;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_expirestop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlags)
  return target;
}

size_t AppearanceFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlags)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Canary.protobuf.appearances.AppearanceFlagNPC npcsaledata = 40;
  total_size += 2UL * this->_internal_npcsaledata_size();
  for (const auto& msg : this->npcsaledata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .Canary.protobuf.appearances.AppearanceFlagBank bank = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bank_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagWrite write = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *write_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagWriteOnce write_once = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *write_once_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagHook hook = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hook_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagLight light = 23;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *light_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagShift shift = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shift_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagHeight height = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *height_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagAutomap automap = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *automap_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .Canary.protobuf.appearances.AppearanceFlagLenshelp lenshelp = 31;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lenshelp_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagClothes clothes = 34;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clothes_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagDefaultAction default_action = 35;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_action_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagMarket market = 36;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *market_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagChangedToExpire changedtoexpire = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *changedtoexpire_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagCyclopedia cyclopediaitem = 44;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cyclopediaitem_);
    }

    // optional .Canary.protobuf.appearances.AppearanceFlagUpgradeClassification upgradeclassification = 48;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upgradeclassification_);
    }

    // optional bool clip = 2;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool bottom = 3;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool top = 4;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool container = 5;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool cumulative = 6;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool usable = 7;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool forceuse = 8;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool multiuse = 9;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional bool liquidpool = 12;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool unpass = 13;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool unmove = 14;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional bool unsight = 15;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional bool avoid = 16;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool no_movement_animation = 17;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool take = 18;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool liquidcontainer = 19;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool hang = 20;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool rotate = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool dont_hide = 24;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool translucent = 25;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool lying_object = 28;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool animate_always = 29;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool fullbank = 32;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool ignore_look = 33;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool wrap = 37;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool unwrap = 38;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool topeffect = 39;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool corpse = 42;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool player_corpse = 43;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool ammo = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool show_off_socket = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool reportable = 47;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool reverse_addons_east = 49;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool reverse_addons_west = 50;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool reverse_addons_south = 51;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool reverse_addons_north = 52;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool wearout = 53;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool clockexpire = 54;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool expire = 55;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool expirestop = 56;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlags::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlags)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlags* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlags>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlags)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlags)
    MergeFrom(*source);
  }
}

void AppearanceFlags::MergeFrom(const AppearanceFlags& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlags)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  npcsaledata_.MergeFrom(from.npcsaledata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bank()->::Canary::protobuf::appearances::AppearanceFlagBank::MergeFrom(from._internal_bank());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_write()->::Canary::protobuf::appearances::AppearanceFlagWrite::MergeFrom(from._internal_write());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_write_once()->::Canary::protobuf::appearances::AppearanceFlagWriteOnce::MergeFrom(from._internal_write_once());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_hook()->::Canary::protobuf::appearances::AppearanceFlagHook::MergeFrom(from._internal_hook());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_light()->::Canary::protobuf::appearances::AppearanceFlagLight::MergeFrom(from._internal_light());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_shift()->::Canary::protobuf::appearances::AppearanceFlagShift::MergeFrom(from._internal_shift());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_height()->::Canary::protobuf::appearances::AppearanceFlagHeight::MergeFrom(from._internal_height());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_automap()->::Canary::protobuf::appearances::AppearanceFlagAutomap::MergeFrom(from._internal_automap());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_lenshelp()->::Canary::protobuf::appearances::AppearanceFlagLenshelp::MergeFrom(from._internal_lenshelp());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_clothes()->::Canary::protobuf::appearances::AppearanceFlagClothes::MergeFrom(from._internal_clothes());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_default_action()->::Canary::protobuf::appearances::AppearanceFlagDefaultAction::MergeFrom(from._internal_default_action());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_market()->::Canary::protobuf::appearances::AppearanceFlagMarket::MergeFrom(from._internal_market());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_changedtoexpire()->::Canary::protobuf::appearances::AppearanceFlagChangedToExpire::MergeFrom(from._internal_changedtoexpire());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_cyclopediaitem()->::Canary::protobuf::appearances::AppearanceFlagCyclopedia::MergeFrom(from._internal_cyclopediaitem());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_upgradeclassification()->::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification::MergeFrom(from._internal_upgradeclassification());
    }
    if (cached_has_bits & 0x00008000u) {
      clip_ = from.clip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      bottom_ = from.bottom_;
    }
    if (cached_has_bits & 0x00020000u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00040000u) {
      container_ = from.container_;
    }
    if (cached_has_bits & 0x00080000u) {
      cumulative_ = from.cumulative_;
    }
    if (cached_has_bits & 0x00100000u) {
      usable_ = from.usable_;
    }
    if (cached_has_bits & 0x00200000u) {
      forceuse_ = from.forceuse_;
    }
    if (cached_has_bits & 0x00400000u) {
      multiuse_ = from.multiuse_;
    }
    if (cached_has_bits & 0x00800000u) {
      liquidpool_ = from.liquidpool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      unpass_ = from.unpass_;
    }
    if (cached_has_bits & 0x02000000u) {
      unmove_ = from.unmove_;
    }
    if (cached_has_bits & 0x04000000u) {
      unsight_ = from.unsight_;
    }
    if (cached_has_bits & 0x08000000u) {
      avoid_ = from.avoid_;
    }
    if (cached_has_bits & 0x10000000u) {
      no_movement_animation_ = from.no_movement_animation_;
    }
    if (cached_has_bits & 0x20000000u) {
      take_ = from.take_;
    }
    if (cached_has_bits & 0x40000000u) {
      liquidcontainer_ = from.liquidcontainer_;
    }
    if (cached_has_bits & 0x80000000u) {
      hang_ = from.hang_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rotate_ = from.rotate_;
    }
    if (cached_has_bits & 0x00000002u) {
      dont_hide_ = from.dont_hide_;
    }
    if (cached_has_bits & 0x00000004u) {
      translucent_ = from.translucent_;
    }
    if (cached_has_bits & 0x00000008u) {
      lying_object_ = from.lying_object_;
    }
    if (cached_has_bits & 0x00000010u) {
      animate_always_ = from.animate_always_;
    }
    if (cached_has_bits & 0x00000020u) {
      fullbank_ = from.fullbank_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_look_ = from.ignore_look_;
    }
    if (cached_has_bits & 0x00000080u) {
      wrap_ = from.wrap_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      unwrap_ = from.unwrap_;
    }
    if (cached_has_bits & 0x00000200u) {
      topeffect_ = from.topeffect_;
    }
    if (cached_has_bits & 0x00000400u) {
      corpse_ = from.corpse_;
    }
    if (cached_has_bits & 0x00000800u) {
      player_corpse_ = from.player_corpse_;
    }
    if (cached_has_bits & 0x00001000u) {
      ammo_ = from.ammo_;
    }
    if (cached_has_bits & 0x00002000u) {
      show_off_socket_ = from.show_off_socket_;
    }
    if (cached_has_bits & 0x00004000u) {
      reportable_ = from.reportable_;
    }
    if (cached_has_bits & 0x00008000u) {
      reverse_addons_east_ = from.reverse_addons_east_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      reverse_addons_west_ = from.reverse_addons_west_;
    }
    if (cached_has_bits & 0x00020000u) {
      reverse_addons_south_ = from.reverse_addons_south_;
    }
    if (cached_has_bits & 0x00040000u) {
      reverse_addons_north_ = from.reverse_addons_north_;
    }
    if (cached_has_bits & 0x00080000u) {
      wearout_ = from.wearout_;
    }
    if (cached_has_bits & 0x00100000u) {
      clockexpire_ = from.clockexpire_;
    }
    if (cached_has_bits & 0x00200000u) {
      expire_ = from.expire_;
    }
    if (cached_has_bits & 0x00400000u) {
      expirestop_ = from.expirestop_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void AppearanceFlags::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlags::CopyFrom(const AppearanceFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlags::IsInitialized() const {
  return true;
}

void AppearanceFlags::InternalSwap(AppearanceFlags* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  npcsaledata_.InternalSwap(&other->npcsaledata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppearanceFlags, expirestop_)
      + sizeof(AppearanceFlags::expirestop_)
      - PROTOBUF_FIELD_OFFSET(AppearanceFlags, bank_)>(
          reinterpret_cast<char*>(&bank_),
          reinterpret_cast<char*>(&other->bank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlags::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagUpgradeClassification::InitAsDefaultInstance() {
}
class AppearanceFlagUpgradeClassification::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagUpgradeClassification>()._has_bits_);
  static void set_has_upgrade_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagUpgradeClassification::AppearanceFlagUpgradeClassification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
}
AppearanceFlagUpgradeClassification::AppearanceFlagUpgradeClassification(const AppearanceFlagUpgradeClassification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  upgrade_classification_ = from.upgrade_classification_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
}

void AppearanceFlagUpgradeClassification::SharedCtor() {
  upgrade_classification_ = 0u;
}

AppearanceFlagUpgradeClassification::~AppearanceFlagUpgradeClassification() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagUpgradeClassification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagUpgradeClassification::ArenaDtor(void* object) {
  AppearanceFlagUpgradeClassification* _this = reinterpret_cast< AppearanceFlagUpgradeClassification* >(object);
  (void)_this;
}
void AppearanceFlagUpgradeClassification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagUpgradeClassification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagUpgradeClassification& AppearanceFlagUpgradeClassification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagUpgradeClassification_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagUpgradeClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upgrade_classification_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagUpgradeClassification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 upgrade_classification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_upgrade_classification(&has_bits);
          upgrade_classification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagUpgradeClassification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 upgrade_classification = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_upgrade_classification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
  return target;
}

size_t AppearanceFlagUpgradeClassification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 upgrade_classification = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_upgrade_classification());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagUpgradeClassification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagUpgradeClassification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagUpgradeClassification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
    MergeFrom(*source);
  }
}

void AppearanceFlagUpgradeClassification::MergeFrom(const AppearanceFlagUpgradeClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_upgrade_classification()) {
    _internal_set_upgrade_classification(from._internal_upgrade_classification());
  }
}

void AppearanceFlagUpgradeClassification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagUpgradeClassification::CopyFrom(const AppearanceFlagUpgradeClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagUpgradeClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagUpgradeClassification::IsInitialized() const {
  return true;
}

void AppearanceFlagUpgradeClassification::InternalSwap(AppearanceFlagUpgradeClassification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(upgrade_classification_, other->upgrade_classification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagUpgradeClassification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagBank::InitAsDefaultInstance() {
}
class AppearanceFlagBank::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagBank>()._has_bits_);
  static void set_has_waypoints(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagBank::AppearanceFlagBank(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagBank)
}
AppearanceFlagBank::AppearanceFlagBank(const AppearanceFlagBank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  waypoints_ = from.waypoints_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagBank)
}

void AppearanceFlagBank::SharedCtor() {
  waypoints_ = 0u;
}

AppearanceFlagBank::~AppearanceFlagBank() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagBank)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagBank::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagBank::ArenaDtor(void* object) {
  AppearanceFlagBank* _this = reinterpret_cast< AppearanceFlagBank* >(object);
  (void)_this;
}
void AppearanceFlagBank::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagBank::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagBank& AppearanceFlagBank::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagBank_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagBank::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagBank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagBank::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 waypoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_waypoints(&has_bits);
          waypoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagBank::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagBank)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 waypoints = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_waypoints(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagBank)
  return target;
}

size_t AppearanceFlagBank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagBank)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 waypoints = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_waypoints());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagBank::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagBank)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagBank* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagBank>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagBank)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagBank)
    MergeFrom(*source);
  }
}

void AppearanceFlagBank::MergeFrom(const AppearanceFlagBank& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagBank)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_waypoints()) {
    _internal_set_waypoints(from._internal_waypoints());
  }
}

void AppearanceFlagBank::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagBank::CopyFrom(const AppearanceFlagBank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagBank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagBank::IsInitialized() const {
  return true;
}

void AppearanceFlagBank::InternalSwap(AppearanceFlagBank* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(waypoints_, other->waypoints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagBank::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagWrite::InitAsDefaultInstance() {
}
class AppearanceFlagWrite::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagWrite>()._has_bits_);
  static void set_has_max_text_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagWrite::AppearanceFlagWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagWrite)
}
AppearanceFlagWrite::AppearanceFlagWrite(const AppearanceFlagWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_text_length_ = from.max_text_length_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagWrite)
}

void AppearanceFlagWrite::SharedCtor() {
  max_text_length_ = 0u;
}

AppearanceFlagWrite::~AppearanceFlagWrite() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagWrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagWrite::ArenaDtor(void* object) {
  AppearanceFlagWrite* _this = reinterpret_cast< AppearanceFlagWrite* >(object);
  (void)_this;
}
void AppearanceFlagWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagWrite& AppearanceFlagWrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagWrite_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_text_length_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 max_text_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_text_length(&has_bits);
          max_text_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagWrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagWrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_text_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_text_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagWrite)
  return target;
}

size_t AppearanceFlagWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagWrite)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 max_text_length = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_text_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagWrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagWrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagWrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagWrite)
    MergeFrom(*source);
  }
}

void AppearanceFlagWrite::MergeFrom(const AppearanceFlagWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_text_length()) {
    _internal_set_max_text_length(from._internal_max_text_length());
  }
}

void AppearanceFlagWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagWrite::CopyFrom(const AppearanceFlagWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagWrite::IsInitialized() const {
  return true;
}

void AppearanceFlagWrite::InternalSwap(AppearanceFlagWrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_text_length_, other->max_text_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagWrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagWriteOnce::InitAsDefaultInstance() {
}
class AppearanceFlagWriteOnce::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagWriteOnce>()._has_bits_);
  static void set_has_max_text_length_once(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagWriteOnce::AppearanceFlagWriteOnce(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
}
AppearanceFlagWriteOnce::AppearanceFlagWriteOnce(const AppearanceFlagWriteOnce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_text_length_once_ = from.max_text_length_once_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
}

void AppearanceFlagWriteOnce::SharedCtor() {
  max_text_length_once_ = 0u;
}

AppearanceFlagWriteOnce::~AppearanceFlagWriteOnce() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagWriteOnce::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagWriteOnce::ArenaDtor(void* object) {
  AppearanceFlagWriteOnce* _this = reinterpret_cast< AppearanceFlagWriteOnce* >(object);
  (void)_this;
}
void AppearanceFlagWriteOnce::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagWriteOnce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagWriteOnce& AppearanceFlagWriteOnce::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagWriteOnce_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagWriteOnce::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_text_length_once_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagWriteOnce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 max_text_length_once = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_text_length_once(&has_bits);
          max_text_length_once_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagWriteOnce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_text_length_once = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_text_length_once(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
  return target;
}

size_t AppearanceFlagWriteOnce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 max_text_length_once = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_text_length_once());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagWriteOnce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagWriteOnce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagWriteOnce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
    MergeFrom(*source);
  }
}

void AppearanceFlagWriteOnce::MergeFrom(const AppearanceFlagWriteOnce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_text_length_once()) {
    _internal_set_max_text_length_once(from._internal_max_text_length_once());
  }
}

void AppearanceFlagWriteOnce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagWriteOnce::CopyFrom(const AppearanceFlagWriteOnce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagWriteOnce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagWriteOnce::IsInitialized() const {
  return true;
}

void AppearanceFlagWriteOnce::InternalSwap(AppearanceFlagWriteOnce* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_text_length_once_, other->max_text_length_once_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagWriteOnce::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagLight::InitAsDefaultInstance() {
}
class AppearanceFlagLight::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagLight>()._has_bits_);
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppearanceFlagLight::AppearanceFlagLight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagLight)
}
AppearanceFlagLight::AppearanceFlagLight(const AppearanceFlagLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&brightness_, &from.brightness_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&brightness_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagLight)
}

void AppearanceFlagLight::SharedCtor() {
  ::memset(&brightness_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&brightness_)) + sizeof(color_));
}

AppearanceFlagLight::~AppearanceFlagLight() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagLight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagLight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagLight::ArenaDtor(void* object) {
  AppearanceFlagLight* _this = reinterpret_cast< AppearanceFlagLight* >(object);
  (void)_this;
}
void AppearanceFlagLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagLight& AppearanceFlagLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagLight_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagLight::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&brightness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&brightness_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 brightness = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_brightness(&has_bits);
          brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 brightness = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_brightness(), target);
  }

  // optional uint32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagLight)
  return target;
}

size_t AppearanceFlagLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 brightness = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_brightness());
    }

    // optional uint32 color = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_color());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagLight)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagLight)
    MergeFrom(*source);
  }
}

void AppearanceFlagLight::MergeFrom(const AppearanceFlagLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      brightness_ = from.brightness_;
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppearanceFlagLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagLight::CopyFrom(const AppearanceFlagLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagLight::IsInitialized() const {
  return true;
}

void AppearanceFlagLight::InternalSwap(AppearanceFlagLight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppearanceFlagLight, color_)
      + sizeof(AppearanceFlagLight::color_)
      - PROTOBUF_FIELD_OFFSET(AppearanceFlagLight, brightness_)>(
          reinterpret_cast<char*>(&brightness_),
          reinterpret_cast<char*>(&other->brightness_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagHeight::InitAsDefaultInstance() {
}
class AppearanceFlagHeight::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagHeight>()._has_bits_);
  static void set_has_elevation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagHeight::AppearanceFlagHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagHeight)
}
AppearanceFlagHeight::AppearanceFlagHeight(const AppearanceFlagHeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  elevation_ = from.elevation_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagHeight)
}

void AppearanceFlagHeight::SharedCtor() {
  elevation_ = 0u;
}

AppearanceFlagHeight::~AppearanceFlagHeight() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagHeight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagHeight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagHeight::ArenaDtor(void* object) {
  AppearanceFlagHeight* _this = reinterpret_cast< AppearanceFlagHeight* >(object);
  (void)_this;
}
void AppearanceFlagHeight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagHeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagHeight& AppearanceFlagHeight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagHeight_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagHeight::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagHeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elevation_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagHeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 elevation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_elevation(&has_bits);
          elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagHeight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagHeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 elevation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_elevation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagHeight)
  return target;
}

size_t AppearanceFlagHeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagHeight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 elevation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_elevation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagHeight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagHeight)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagHeight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagHeight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagHeight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagHeight)
    MergeFrom(*source);
  }
}

void AppearanceFlagHeight::MergeFrom(const AppearanceFlagHeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagHeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_elevation()) {
    _internal_set_elevation(from._internal_elevation());
  }
}

void AppearanceFlagHeight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagHeight::CopyFrom(const AppearanceFlagHeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagHeight::IsInitialized() const {
  return true;
}

void AppearanceFlagHeight::InternalSwap(AppearanceFlagHeight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(elevation_, other->elevation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagHeight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagShift::InitAsDefaultInstance() {
}
class AppearanceFlagShift::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagShift>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppearanceFlagShift::AppearanceFlagShift(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagShift)
}
AppearanceFlagShift::AppearanceFlagShift(const AppearanceFlagShift& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagShift)
}

void AppearanceFlagShift::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

AppearanceFlagShift::~AppearanceFlagShift() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagShift)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagShift::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagShift::ArenaDtor(void* object) {
  AppearanceFlagShift* _this = reinterpret_cast< AppearanceFlagShift* >(object);
  (void)_this;
}
void AppearanceFlagShift::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagShift::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagShift& AppearanceFlagShift::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagShift_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagShift::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagShift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagShift::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagShift::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagShift)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagShift)
  return target;
}

size_t AppearanceFlagShift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagShift)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagShift::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagShift)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagShift* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagShift>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagShift)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagShift)
    MergeFrom(*source);
  }
}

void AppearanceFlagShift::MergeFrom(const AppearanceFlagShift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagShift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppearanceFlagShift::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagShift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagShift::CopyFrom(const AppearanceFlagShift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagShift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagShift::IsInitialized() const {
  return true;
}

void AppearanceFlagShift::InternalSwap(AppearanceFlagShift* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppearanceFlagShift, y_)
      + sizeof(AppearanceFlagShift::y_)
      - PROTOBUF_FIELD_OFFSET(AppearanceFlagShift, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagShift::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagClothes::InitAsDefaultInstance() {
}
class AppearanceFlagClothes::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagClothes>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagClothes::AppearanceFlagClothes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagClothes)
}
AppearanceFlagClothes::AppearanceFlagClothes(const AppearanceFlagClothes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagClothes)
}

void AppearanceFlagClothes::SharedCtor() {
  slot_ = 0u;
}

AppearanceFlagClothes::~AppearanceFlagClothes() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagClothes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagClothes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagClothes::ArenaDtor(void* object) {
  AppearanceFlagClothes* _this = reinterpret_cast< AppearanceFlagClothes* >(object);
  (void)_this;
}
void AppearanceFlagClothes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagClothes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagClothes& AppearanceFlagClothes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagClothes_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagClothes::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagClothes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagClothes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagClothes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagClothes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagClothes)
  return target;
}

size_t AppearanceFlagClothes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagClothes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 slot = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagClothes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagClothes)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagClothes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagClothes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagClothes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagClothes)
    MergeFrom(*source);
  }
}

void AppearanceFlagClothes::MergeFrom(const AppearanceFlagClothes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagClothes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot()) {
    _internal_set_slot(from._internal_slot());
  }
}

void AppearanceFlagClothes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagClothes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagClothes::CopyFrom(const AppearanceFlagClothes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagClothes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagClothes::IsInitialized() const {
  return true;
}

void AppearanceFlagClothes::InternalSwap(AppearanceFlagClothes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_, other->slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagClothes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagDefaultAction::InitAsDefaultInstance() {
}
class AppearanceFlagDefaultAction::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagDefaultAction>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagDefaultAction::AppearanceFlagDefaultAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
}
AppearanceFlagDefaultAction::AppearanceFlagDefaultAction(const AppearanceFlagDefaultAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
}

void AppearanceFlagDefaultAction::SharedCtor() {
  action_ = 0;
}

AppearanceFlagDefaultAction::~AppearanceFlagDefaultAction() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagDefaultAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagDefaultAction::ArenaDtor(void* object) {
  AppearanceFlagDefaultAction* _this = reinterpret_cast< AppearanceFlagDefaultAction* >(object);
  (void)_this;
}
void AppearanceFlagDefaultAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagDefaultAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagDefaultAction& AppearanceFlagDefaultAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagDefaultAction_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagDefaultAction::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagDefaultAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Canary.protobuf.appearances.PLAYER_ACTION action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Canary::protobuf::appearances::PLAYER_ACTION_IsValid(val))) {
            _internal_set_action(static_cast<::Canary::protobuf::appearances::PLAYER_ACTION>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagDefaultAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.PLAYER_ACTION action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
  return target;
}

size_t AppearanceFlagDefaultAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Canary.protobuf.appearances.PLAYER_ACTION action = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagDefaultAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagDefaultAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagDefaultAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
    MergeFrom(*source);
  }
}

void AppearanceFlagDefaultAction::MergeFrom(const AppearanceFlagDefaultAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action()) {
    _internal_set_action(from._internal_action());
  }
}

void AppearanceFlagDefaultAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagDefaultAction::CopyFrom(const AppearanceFlagDefaultAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagDefaultAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagDefaultAction::IsInitialized() const {
  return true;
}

void AppearanceFlagDefaultAction::InternalSwap(AppearanceFlagDefaultAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagDefaultAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagMarket::InitAsDefaultInstance() {
}
class AppearanceFlagMarket::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagMarket>()._has_bits_);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trade_as_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_as_object_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minimum_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AppearanceFlagMarket::AppearanceFlagMarket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  restrict_to_profession_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagMarket)
}
AppearanceFlagMarket::AppearanceFlagMarket(const AppearanceFlagMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      restrict_to_profession_(from.restrict_to_profession_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trade_as_object_id_, &from.trade_as_object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&trade_as_object_id_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagMarket)
}

void AppearanceFlagMarket::SharedCtor() {
  ::memset(&trade_as_object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minimum_level_) -
      reinterpret_cast<char*>(&trade_as_object_id_)) + sizeof(minimum_level_));
  category_ = 1;
}

AppearanceFlagMarket::~AppearanceFlagMarket() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagMarket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagMarket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagMarket::ArenaDtor(void* object) {
  AppearanceFlagMarket* _this = reinterpret_cast< AppearanceFlagMarket* >(object);
  (void)_this;
}
void AppearanceFlagMarket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagMarket& AppearanceFlagMarket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagMarket_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restrict_to_profession_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&trade_as_object_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minimum_level_) -
        reinterpret_cast<char*>(&trade_as_object_id_)) + sizeof(minimum_level_));
    category_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagMarket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Canary.protobuf.appearances.ITEM_CATEGORY category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Canary::protobuf::appearances::ITEM_CATEGORY_IsValid(val))) {
            _internal_set_category(static_cast<::Canary::protobuf::appearances::ITEM_CATEGORY>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 trade_as_object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trade_as_object_id(&has_bits);
          trade_as_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 show_as_object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_show_as_object_id(&has_bits);
          show_as_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Canary.protobuf.appearances.PLAYER_PROFESSION restrict_to_profession = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::Canary::protobuf::appearances::PLAYER_PROFESSION_IsValid(val))) {
              _internal_add_restrict_to_profession(static_cast<::Canary::protobuf::appearances::PLAYER_PROFESSION>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_restrict_to_profession(), ptr, ctx, ::Canary::protobuf::appearances::PLAYER_PROFESSION_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minimum_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_minimum_level(&has_bits);
          minimum_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagMarket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.ITEM_CATEGORY category = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // optional uint32 trade_as_object_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trade_as_object_id(), target);
  }

  // optional uint32 show_as_object_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_show_as_object_id(), target);
  }

  // repeated .Canary.protobuf.appearances.PLAYER_PROFESSION restrict_to_profession = 5;
  for (int i = 0, n = this->_internal_restrict_to_profession_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_restrict_to_profession(i), target);
  }

  // optional uint32 minimum_level = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_minimum_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagMarket)
  return target;
}

size_t AppearanceFlagMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagMarket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Canary.protobuf.appearances.PLAYER_PROFESSION restrict_to_profession = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_restrict_to_profession_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_restrict_to_profession(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 trade_as_object_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trade_as_object_id());
    }

    // optional uint32 show_as_object_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_show_as_object_id());
    }

    // optional uint32 minimum_level = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minimum_level());
    }

    // optional .Canary.protobuf.appearances.ITEM_CATEGORY category = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagMarket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagMarket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagMarket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagMarket)
    MergeFrom(*source);
  }
}

void AppearanceFlagMarket::MergeFrom(const AppearanceFlagMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  restrict_to_profession_.MergeFrom(from.restrict_to_profession_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      trade_as_object_id_ = from.trade_as_object_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_as_object_id_ = from.show_as_object_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      minimum_level_ = from.minimum_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      category_ = from.category_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppearanceFlagMarket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagMarket::CopyFrom(const AppearanceFlagMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagMarket::IsInitialized() const {
  return true;
}

void AppearanceFlagMarket::InternalSwap(AppearanceFlagMarket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  restrict_to_profession_.InternalSwap(&other->restrict_to_profession_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppearanceFlagMarket, minimum_level_)
      + sizeof(AppearanceFlagMarket::minimum_level_)
      - PROTOBUF_FIELD_OFFSET(AppearanceFlagMarket, trade_as_object_id_)>(
          reinterpret_cast<char*>(&trade_as_object_id_),
          reinterpret_cast<char*>(&other->trade_as_object_id_));
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagMarket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagNPC::InitAsDefaultInstance() {
}
class AppearanceFlagNPC::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagNPC>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sale_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buy_price(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_currency_object_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_currency_quest_flag_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AppearanceFlagNPC::AppearanceFlagNPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagNPC)
}
AppearanceFlagNPC::AppearanceFlagNPC(const AppearanceFlagNPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location()) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location(),
      GetArena());
  }
  currency_quest_flag_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_quest_flag_display_name()) {
    currency_quest_flag_display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_currency_quest_flag_display_name(),
      GetArena());
  }
  ::memcpy(&sale_price_, &from.sale_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_object_type_id_) -
    reinterpret_cast<char*>(&sale_price_)) + sizeof(currency_object_type_id_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagNPC)
}

void AppearanceFlagNPC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppearanceFlagNPC_appearances_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_quest_flag_display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sale_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_object_type_id_) -
      reinterpret_cast<char*>(&sale_price_)) + sizeof(currency_object_type_id_));
}

AppearanceFlagNPC::~AppearanceFlagNPC() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagNPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagNPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_quest_flag_display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppearanceFlagNPC::ArenaDtor(void* object) {
  AppearanceFlagNPC* _this = reinterpret_cast< AppearanceFlagNPC* >(object);
  (void)_this;
}
void AppearanceFlagNPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagNPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagNPC& AppearanceFlagNPC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagNPC_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagNPC::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagNPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      currency_quest_flag_display_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&sale_price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_object_type_id_) -
        reinterpret_cast<char*>(&sale_price_)) + sizeof(currency_object_type_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagNPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_location();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sale_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sale_price(&has_bits);
          sale_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 buy_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_buy_price(&has_bits);
          buy_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 currency_object_type_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_currency_object_type_id(&has_bits);
          currency_object_type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes currency_quest_flag_display_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_currency_quest_flag_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagNPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagNPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_location(), target);
  }

  // optional uint32 sale_price = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sale_price(), target);
  }

  // optional uint32 buy_price = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_buy_price(), target);
  }

  // optional uint32 currency_object_type_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_currency_object_type_id(), target);
  }

  // optional bytes currency_quest_flag_display_name = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_currency_quest_flag_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagNPC)
  return target;
}

size_t AppearanceFlagNPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagNPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_name());
    }

    // optional bytes location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_location());
    }

    // optional bytes currency_quest_flag_display_name = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_currency_quest_flag_display_name());
    }

    // optional uint32 sale_price = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sale_price());
    }

    // optional uint32 buy_price = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_buy_price());
    }

    // optional uint32 currency_object_type_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_currency_object_type_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagNPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagNPC)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagNPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagNPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagNPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagNPC)
    MergeFrom(*source);
  }
}

void AppearanceFlagNPC::MergeFrom(const AppearanceFlagNPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagNPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_location(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_currency_quest_flag_display_name(from._internal_currency_quest_flag_display_name());
    }
    if (cached_has_bits & 0x00000008u) {
      sale_price_ = from.sale_price_;
    }
    if (cached_has_bits & 0x00000010u) {
      buy_price_ = from.buy_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      currency_object_type_id_ = from.currency_object_type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppearanceFlagNPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagNPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagNPC::CopyFrom(const AppearanceFlagNPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagNPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagNPC::IsInitialized() const {
  return true;
}

void AppearanceFlagNPC::InternalSwap(AppearanceFlagNPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  currency_quest_flag_display_name_.Swap(&other->currency_quest_flag_display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppearanceFlagNPC, currency_object_type_id_)
      + sizeof(AppearanceFlagNPC::currency_object_type_id_)
      - PROTOBUF_FIELD_OFFSET(AppearanceFlagNPC, sale_price_)>(
          reinterpret_cast<char*>(&sale_price_),
          reinterpret_cast<char*>(&other->sale_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagNPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagAutomap::InitAsDefaultInstance() {
}
class AppearanceFlagAutomap::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagAutomap>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagAutomap::AppearanceFlagAutomap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagAutomap)
}
AppearanceFlagAutomap::AppearanceFlagAutomap(const AppearanceFlagAutomap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagAutomap)
}

void AppearanceFlagAutomap::SharedCtor() {
  color_ = 0u;
}

AppearanceFlagAutomap::~AppearanceFlagAutomap() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagAutomap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagAutomap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagAutomap::ArenaDtor(void* object) {
  AppearanceFlagAutomap* _this = reinterpret_cast< AppearanceFlagAutomap* >(object);
  (void)_this;
}
void AppearanceFlagAutomap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagAutomap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagAutomap& AppearanceFlagAutomap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagAutomap_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagAutomap::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagAutomap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagAutomap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagAutomap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagAutomap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagAutomap)
  return target;
}

size_t AppearanceFlagAutomap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagAutomap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 color = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagAutomap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagAutomap)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagAutomap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagAutomap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagAutomap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagAutomap)
    MergeFrom(*source);
  }
}

void AppearanceFlagAutomap::MergeFrom(const AppearanceFlagAutomap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagAutomap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_color()) {
    _internal_set_color(from._internal_color());
  }
}

void AppearanceFlagAutomap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagAutomap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagAutomap::CopyFrom(const AppearanceFlagAutomap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagAutomap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagAutomap::IsInitialized() const {
  return true;
}

void AppearanceFlagAutomap::InternalSwap(AppearanceFlagAutomap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagAutomap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagHook::InitAsDefaultInstance() {
}
class AppearanceFlagHook::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagHook>()._has_bits_);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagHook::AppearanceFlagHook(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagHook)
}
AppearanceFlagHook::AppearanceFlagHook(const AppearanceFlagHook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagHook)
}

void AppearanceFlagHook::SharedCtor() {
  direction_ = 1;
}

AppearanceFlagHook::~AppearanceFlagHook() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagHook)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagHook::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagHook::ArenaDtor(void* object) {
  AppearanceFlagHook* _this = reinterpret_cast< AppearanceFlagHook* >(object);
  (void)_this;
}
void AppearanceFlagHook::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagHook::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagHook& AppearanceFlagHook::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagHook_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagHook::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagHook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  direction_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagHook::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Canary.protobuf.appearances.HOOK_TYPE direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Canary::protobuf::appearances::HOOK_TYPE_IsValid(val))) {
            _internal_set_direction(static_cast<::Canary::protobuf::appearances::HOOK_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagHook::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagHook)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Canary.protobuf.appearances.HOOK_TYPE direction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagHook)
  return target;
}

size_t AppearanceFlagHook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagHook)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Canary.protobuf.appearances.HOOK_TYPE direction = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagHook::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagHook)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagHook* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagHook>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagHook)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagHook)
    MergeFrom(*source);
  }
}

void AppearanceFlagHook::MergeFrom(const AppearanceFlagHook& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagHook)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_direction()) {
    _internal_set_direction(from._internal_direction());
  }
}

void AppearanceFlagHook::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagHook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagHook::CopyFrom(const AppearanceFlagHook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagHook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagHook::IsInitialized() const {
  return true;
}

void AppearanceFlagHook::InternalSwap(AppearanceFlagHook* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagHook::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagLenshelp::InitAsDefaultInstance() {
}
class AppearanceFlagLenshelp::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagLenshelp>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagLenshelp::AppearanceFlagLenshelp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagLenshelp)
}
AppearanceFlagLenshelp::AppearanceFlagLenshelp(const AppearanceFlagLenshelp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagLenshelp)
}

void AppearanceFlagLenshelp::SharedCtor() {
  id_ = 0u;
}

AppearanceFlagLenshelp::~AppearanceFlagLenshelp() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagLenshelp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagLenshelp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagLenshelp::ArenaDtor(void* object) {
  AppearanceFlagLenshelp* _this = reinterpret_cast< AppearanceFlagLenshelp* >(object);
  (void)_this;
}
void AppearanceFlagLenshelp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagLenshelp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagLenshelp& AppearanceFlagLenshelp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagLenshelp_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagLenshelp::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagLenshelp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagLenshelp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagLenshelp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagLenshelp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagLenshelp)
  return target;
}

size_t AppearanceFlagLenshelp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagLenshelp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagLenshelp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagLenshelp)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagLenshelp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagLenshelp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagLenshelp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagLenshelp)
    MergeFrom(*source);
  }
}

void AppearanceFlagLenshelp::MergeFrom(const AppearanceFlagLenshelp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagLenshelp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void AppearanceFlagLenshelp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagLenshelp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagLenshelp::CopyFrom(const AppearanceFlagLenshelp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagLenshelp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagLenshelp::IsInitialized() const {
  return true;
}

void AppearanceFlagLenshelp::InternalSwap(AppearanceFlagLenshelp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagLenshelp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagChangedToExpire::InitAsDefaultInstance() {
}
class AppearanceFlagChangedToExpire::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagChangedToExpire>()._has_bits_);
  static void set_has_former_object_typeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagChangedToExpire::AppearanceFlagChangedToExpire(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
}
AppearanceFlagChangedToExpire::AppearanceFlagChangedToExpire(const AppearanceFlagChangedToExpire& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  former_object_typeid_ = from.former_object_typeid_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
}

void AppearanceFlagChangedToExpire::SharedCtor() {
  former_object_typeid_ = 0u;
}

AppearanceFlagChangedToExpire::~AppearanceFlagChangedToExpire() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagChangedToExpire::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagChangedToExpire::ArenaDtor(void* object) {
  AppearanceFlagChangedToExpire* _this = reinterpret_cast< AppearanceFlagChangedToExpire* >(object);
  (void)_this;
}
void AppearanceFlagChangedToExpire::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagChangedToExpire::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagChangedToExpire& AppearanceFlagChangedToExpire::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagChangedToExpire_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagChangedToExpire::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  former_object_typeid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagChangedToExpire::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 former_object_typeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_former_object_typeid(&has_bits);
          former_object_typeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagChangedToExpire::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 former_object_typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_former_object_typeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
  return target;
}

size_t AppearanceFlagChangedToExpire::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 former_object_typeid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_former_object_typeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagChangedToExpire::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagChangedToExpire* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagChangedToExpire>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
    MergeFrom(*source);
  }
}

void AppearanceFlagChangedToExpire::MergeFrom(const AppearanceFlagChangedToExpire& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_former_object_typeid()) {
    _internal_set_former_object_typeid(from._internal_former_object_typeid());
  }
}

void AppearanceFlagChangedToExpire::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagChangedToExpire::CopyFrom(const AppearanceFlagChangedToExpire& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagChangedToExpire)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagChangedToExpire::IsInitialized() const {
  return true;
}

void AppearanceFlagChangedToExpire::InternalSwap(AppearanceFlagChangedToExpire* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(former_object_typeid_, other->former_object_typeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagChangedToExpire::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AppearanceFlagCyclopedia::InitAsDefaultInstance() {
}
class AppearanceFlagCyclopedia::_Internal {
 public:
  using HasBits = decltype(std::declval<AppearanceFlagCyclopedia>()._has_bits_);
  static void set_has_cyclopedia_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppearanceFlagCyclopedia::AppearanceFlagCyclopedia(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
}
AppearanceFlagCyclopedia::AppearanceFlagCyclopedia(const AppearanceFlagCyclopedia& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cyclopedia_type_ = from.cyclopedia_type_;
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
}

void AppearanceFlagCyclopedia::SharedCtor() {
  cyclopedia_type_ = 0u;
}

AppearanceFlagCyclopedia::~AppearanceFlagCyclopedia() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppearanceFlagCyclopedia::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AppearanceFlagCyclopedia::ArenaDtor(void* object) {
  AppearanceFlagCyclopedia* _this = reinterpret_cast< AppearanceFlagCyclopedia* >(object);
  (void)_this;
}
void AppearanceFlagCyclopedia::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppearanceFlagCyclopedia::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppearanceFlagCyclopedia& AppearanceFlagCyclopedia::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppearanceFlagCyclopedia_appearances_2eproto.base);
  return *internal_default_instance();
}


void AppearanceFlagCyclopedia::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cyclopedia_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppearanceFlagCyclopedia::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cyclopedia_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cyclopedia_type(&has_bits);
          cyclopedia_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppearanceFlagCyclopedia::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cyclopedia_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cyclopedia_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
  return target;
}

size_t AppearanceFlagCyclopedia::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 cyclopedia_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cyclopedia_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppearanceFlagCyclopedia::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
  GOOGLE_DCHECK_NE(&from, this);
  const AppearanceFlagCyclopedia* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppearanceFlagCyclopedia>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
    MergeFrom(*source);
  }
}

void AppearanceFlagCyclopedia::MergeFrom(const AppearanceFlagCyclopedia& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cyclopedia_type()) {
    _internal_set_cyclopedia_type(from._internal_cyclopedia_type());
  }
}

void AppearanceFlagCyclopedia::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppearanceFlagCyclopedia::CopyFrom(const AppearanceFlagCyclopedia& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.AppearanceFlagCyclopedia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppearanceFlagCyclopedia::IsInitialized() const {
  return true;
}

void AppearanceFlagCyclopedia::InternalSwap(AppearanceFlagCyclopedia* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cyclopedia_type_, other->cyclopedia_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppearanceFlagCyclopedia::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpecialMeaningAppearanceIds::InitAsDefaultInstance() {
}
class SpecialMeaningAppearanceIds::_Internal {
 public:
  using HasBits = decltype(std::declval<SpecialMeaningAppearanceIds>()._has_bits_);
  static void set_has_gold_coin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_platinum_coin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_crystal_coin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tibia_coin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stamped_letter_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_supply_stash_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

SpecialMeaningAppearanceIds::SpecialMeaningAppearanceIds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
}
SpecialMeaningAppearanceIds::SpecialMeaningAppearanceIds(const SpecialMeaningAppearanceIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_coin_id_, &from.gold_coin_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&supply_stash_id_) -
    reinterpret_cast<char*>(&gold_coin_id_)) + sizeof(supply_stash_id_));
  // @@protoc_insertion_point(copy_constructor:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
}

void SpecialMeaningAppearanceIds::SharedCtor() {
  ::memset(&gold_coin_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supply_stash_id_) -
      reinterpret_cast<char*>(&gold_coin_id_)) + sizeof(supply_stash_id_));
}

SpecialMeaningAppearanceIds::~SpecialMeaningAppearanceIds() {
  // @@protoc_insertion_point(destructor:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpecialMeaningAppearanceIds::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpecialMeaningAppearanceIds::ArenaDtor(void* object) {
  SpecialMeaningAppearanceIds* _this = reinterpret_cast< SpecialMeaningAppearanceIds* >(object);
  (void)_this;
}
void SpecialMeaningAppearanceIds::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpecialMeaningAppearanceIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpecialMeaningAppearanceIds& SpecialMeaningAppearanceIds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpecialMeaningAppearanceIds_appearances_2eproto.base);
  return *internal_default_instance();
}


void SpecialMeaningAppearanceIds::Clear() {
// @@protoc_insertion_point(message_clear_start:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&gold_coin_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&supply_stash_id_) -
        reinterpret_cast<char*>(&gold_coin_id_)) + sizeof(supply_stash_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpecialMeaningAppearanceIds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 gold_coin_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gold_coin_id(&has_bits);
          gold_coin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 platinum_coin_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_platinum_coin_id(&has_bits);
          platinum_coin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 crystal_coin_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_crystal_coin_id(&has_bits);
          crystal_coin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tibia_coin_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tibia_coin_id(&has_bits);
          tibia_coin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stamped_letter_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stamped_letter_id(&has_bits);
          stamped_letter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 supply_stash_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_supply_stash_id(&has_bits);
          supply_stash_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpecialMeaningAppearanceIds::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gold_coin_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gold_coin_id(), target);
  }

  // optional uint32 platinum_coin_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_platinum_coin_id(), target);
  }

  // optional uint32 crystal_coin_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_crystal_coin_id(), target);
  }

  // optional uint32 tibia_coin_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tibia_coin_id(), target);
  }

  // optional uint32 stamped_letter_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_stamped_letter_id(), target);
  }

  // optional uint32 supply_stash_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_supply_stash_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
  return target;
}

size_t SpecialMeaningAppearanceIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 gold_coin_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_coin_id());
    }

    // optional uint32 platinum_coin_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_platinum_coin_id());
    }

    // optional uint32 crystal_coin_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_crystal_coin_id());
    }

    // optional uint32 tibia_coin_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tibia_coin_id());
    }

    // optional uint32 stamped_letter_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stamped_letter_id());
    }

    // optional uint32 supply_stash_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_supply_stash_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpecialMeaningAppearanceIds::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
  GOOGLE_DCHECK_NE(&from, this);
  const SpecialMeaningAppearanceIds* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpecialMeaningAppearanceIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
    MergeFrom(*source);
  }
}

void SpecialMeaningAppearanceIds::MergeFrom(const SpecialMeaningAppearanceIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      gold_coin_id_ = from.gold_coin_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      platinum_coin_id_ = from.platinum_coin_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      crystal_coin_id_ = from.crystal_coin_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      tibia_coin_id_ = from.tibia_coin_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      stamped_letter_id_ = from.stamped_letter_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      supply_stash_id_ = from.supply_stash_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpecialMeaningAppearanceIds::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialMeaningAppearanceIds::CopyFrom(const SpecialMeaningAppearanceIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Canary.protobuf.appearances.SpecialMeaningAppearanceIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialMeaningAppearanceIds::IsInitialized() const {
  return true;
}

void SpecialMeaningAppearanceIds::InternalSwap(SpecialMeaningAppearanceIds* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpecialMeaningAppearanceIds, supply_stash_id_)
      + sizeof(SpecialMeaningAppearanceIds::supply_stash_id_)
      - PROTOBUF_FIELD_OFFSET(SpecialMeaningAppearanceIds, gold_coin_id_)>(
          reinterpret_cast<char*>(&gold_coin_id_),
          reinterpret_cast<char*>(&other->gold_coin_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpecialMeaningAppearanceIds::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace appearances
}  // namespace protobuf
}  // namespace Canary
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::Coordinate* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::Coordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::Coordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::Appearances* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::Appearances >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::Appearances >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::SpritePhase* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::SpritePhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::SpritePhase >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::SpriteAnimation* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::SpriteAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::SpriteAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::Box* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::Box >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::Box >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::SpriteInfo* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::SpriteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::SpriteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::FrameGroup* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::FrameGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::FrameGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::Appearance* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::Appearance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::Appearance >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlags* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagUpgradeClassification >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagBank* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagBank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagBank >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagWrite* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagWriteOnce* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagWriteOnce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagWriteOnce >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagLight* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagLight >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagHeight* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagHeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagHeight >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagShift* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagShift >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagShift >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagClothes* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagClothes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagClothes >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagDefaultAction* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagDefaultAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagDefaultAction >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagMarket* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagMarket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagNPC* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagNPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagNPC >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagAutomap* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagAutomap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagAutomap >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagHook* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagHook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagHook >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagLenshelp* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagLenshelp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagLenshelp >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagChangedToExpire >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::AppearanceFlagCyclopedia* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::AppearanceFlagCyclopedia >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::AppearanceFlagCyclopedia >(arena);
}
template<> PROTOBUF_NOINLINE ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds* Arena::CreateMaybeMessage< ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Canary::protobuf::appearances::SpecialMeaningAppearanceIds >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
